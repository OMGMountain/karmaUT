(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = global || self, global.Ans = factory());
}(this, (function () { 'use strict';

    /**
     * SDK 基础字段定义表
     * base.outer：上报日志基础结构定义
     * base.xcontext:上报报文找中xcontext下的共有字段定义
     * $开头的字段为各个事件特殊拥有字段
     */
    var fieldTemplate = {
      base: {
        outer: ["appid", "xwho", "xwhat", "xwhen", "xcontext"],
        xcontext: ["$lib", "$lib_version", "$platform", "$debug", "$is_login"]
      },
      $startup: {
        xcontext: ["$screen_width", "$screen_height", "$web_crawler", "$time_zone", "$language", "$session_id", "$is_first_time", "$is_first_day", "$utm_campaign_id", "$utm_source", "$utm_medium", "$utm_term", "$utm_content", "$utm_campaign", "$session_id", "$is_time_calibrated"]
      },
      $track: {
        xcontext: ["$screen_width", "$screen_height", "$web_crawler", "$time_zone", "$language", "$is_first_day", "$session_id", "$utm_campaign_id", "$utm_source", "$utm_medium", "$utm_term", "$utm_content", "$utm_campaign", "$session_id", "$is_time_calibrated"]
      },
      $pageview: {
        xcontext: ["$screen_width", "$screen_height", "$web_crawler", "$time_zone", "$language", "$session_id", "$is_first_day", "$referrer", "$referrer_domain", "$title", "$url", "$startup_time", "$utm_campaign_id", "$utm_source", "$utm_medium", "$utm_term", "$utm_content", "$utm_campaign", "$session_id", "$is_time_calibrated"]
      },
      $alias: {
        xcontext: ["$original_id"]
      },
      $getPresetProperties: {
        xcontext: ["$screen_width", "$screen_height", "$time_zone", "$language"]
      }
    };

    var baseConfig = {
      base: {
        appid: "",
        $debug: 0,
        uploadURL: "",
        auto: true,
        autoProfile: true,
        hash: true,
        pageProperty: {},
        $lib_version: "4.3.4.3"
      },
      status: {
        code: 200,
        FnName: "",
        key: "",
        value: "",
        errorCode: "",
        successCode: ""
      },
      keywords: fieldTemplate.base.xcontext,
      baseJson: fieldTemplate.base.outer,
      sendNum: 1800
    };

    // import { decodeGBK } from './decodeGBK.js'
    var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    function _utf8_encode(string) {
      string = string.replace(/\r\n/g, "\n");
      var utftext = "";

      for (var n = 0; n < string.length; n++) {
        var c = string.charCodeAt(n);

        if (c < 128) {
          utftext += String.fromCharCode(c);
        } else if (c > 127 && c < 2048) {
          utftext += String.fromCharCode(c >> 6 | 192);
          utftext += String.fromCharCode(c & 63 | 128);
        } else {
          utftext += String.fromCharCode(c >> 12 | 224);
          utftext += String.fromCharCode(c >> 6 & 63 | 128);
          utftext += String.fromCharCode(c & 63 | 128);
        }
      }

      return utftext;
    }

    function _utf8_decode(utftext) {
      var string = "",
          i = 0,
          c = 0,
          c2 = 0,
          c3 = 0;

      while (i < utftext.length) {
        c = utftext.charCodeAt(i);

        if (c < 128) {
          string += String.fromCharCode(c);
          i++;
        } else if (c > 191 && c < 224) {
          c2 = utftext.charCodeAt(i + 1);
          string += String.fromCharCode((c & 31) << 6 | c2 & 63);
          i += 2;
        } else {
          c2 = utftext.charCodeAt(i + 1);
          c3 = utftext.charCodeAt(i + 2);
          string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
          i += 3;
        }
      }

      return string;
    }

    function Util() {}

    Util.prototype.paramType = function (param) {
      return Object.prototype.toString.call(param).replace('[object ', '').replace(']', '');
    };

    Util.prototype.objHasKay = function (obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    };

    Util.prototype.ArrayToObj = function (arr) {
      var obj = {};

      for (var i = 0; i < arr.length; i++) {
        obj[arr[i]] = '';
      }

      return obj;
    };

    Util.prototype.keyValueToObje = function (key, value) {
      var obj = {};
      obj[key] = value;
      return obj;
    };

    Util.prototype.toDeepObj = function (param1, param2, level) {
      var obj = {};

      if (this.paramType(param1) === 'String') {
        obj = this.keyValueToObje(param1, param2);
        return obj;
      }

      if (this.paramType(param1) === 'Array') {
        obj = this.ArrayToObj(param1);
        return obj;
      }

      if (this.paramType(param1) === 'Object') {
        for (var key in param1) {
          obj[key] = this.toDeepObj(param1[key]);
        }
      }

      return obj;
    };

    Util.prototype.toObj = function (param1, param2, level) {
      var obj = {};

      if (this.paramType(param1) === 'String') {
        obj = this.keyValueToObje(param1, param2);
        return obj;
      }

      if (this.paramType(param1) === 'Array') {
        obj = this.ArrayToObj(param1);
        return obj;
      }

      if (this.paramType(param1) === 'Object') {
        return param1;
      }

      return obj;
    };

    Util.prototype.objMerge = function (parentObj, part) {
      if (this.paramType(parentObj) !== 'Object' || this.paramType(part) !== 'Object') {
        return parentObj;
      }

      var obj = {};

      for (var key in parentObj) {
        obj[key] = parentObj[key];
      }

      for (var key in part) {
        if (obj[key] && this.paramType(obj[key]) === 'Object' && this.paramType(part[key]) === 'Object') {
          obj[key] = this.objMerge(obj[key], part[key]);
        } else if (this.paramType(obj[key]) === 'Array' && this.paramType(part[key]) === 'Array') {
          obj[key] = this.arrayMergeUnique(obj[key], part[key]);
        } else {
          obj[key] = part[key];
        }
      }

      return obj;
    };

    Util.prototype.compose = function () {
      var args = arguments;
      var start = args.length - 1;
      return function () {
        var i = start;
        var result = args[start].apply(this, arguments);

        while (i--) {
          result = args[i].call(this, result);
        }

        return result;
      };
    };

    Util.prototype.fnMerge = function (parentObj, part) {
      if (this.paramType(parentObj) !== 'Object' || this.paramType(part) !== 'Object') {
        return parentObj;
      }

      var obj = {};

      for (var key in parentObj) {
        obj[key] = parentObj[key];
      }

      for (var key in part) {
        if (obj[key] && this.paramType(obj[key]) === 'Object' && this.paramType(part[key]) === 'Object') {
          obj[key] = this.fnMerge(obj[key], part[key]);
        } else if (this.paramType(obj[key]) === 'Function' && this.paramType(part[key]) === 'Function') {
          obj[key] = this.compose(obj[key], part[key]);
        } else {
          obj[key] = part[key];
        }
      }

      return obj;
    };

    Util.prototype.arrayUnique = function (arr) {
      var tmpArr = [],
          hash = {}; //hash为hash表

      for (var i = 0; i < arr.length; i++) {
        if (!hash[arr[i]]) {
          //如果hash表中没有当前项
          hash[arr[i]] = true; //存入hash表

          tmpArr.push(arr[i]); //存入临时数组
        }
      }

      return tmpArr;
    };

    Util.prototype.arrayMerge = function (arr1, arr2) {
      arr1.push.apply(arr1, arr2);
      return arr1;
    };

    Util.prototype.arrayMergeUnique = function (arr1, arr2) {
      arr1.push.apply(arr1, arr2);
      return this.arrayUnique(arr1);
    };

    Util.prototype.encode = function (input) {
      var output = "",
          chr1,
          chr2,
          chr3,
          enc1,
          enc2,
          enc3,
          enc4,
          i = 0;
      input = _utf8_encode(input);

      while (i < input.length) {
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        enc1 = chr1 >> 2;
        enc2 = (chr1 & 3) << 4 | chr2 >> 4;
        enc3 = (chr2 & 15) << 2 | chr3 >> 6;
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
          enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
          enc4 = 64;
        }

        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
      }

      return output;
    };

    Util.prototype.decode = function (input) {
      var output = "",
          chr1,
          chr2,
          chr3,
          enc1,
          enc2,
          enc3,
          enc4,
          i = 0;
      input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

      while (i < input.length) {
        enc1 = _keyStr.indexOf(input.charAt(i++));
        enc2 = _keyStr.indexOf(input.charAt(i++));
        enc3 = _keyStr.indexOf(input.charAt(i++));
        enc4 = _keyStr.indexOf(input.charAt(i++));
        chr1 = enc1 << 2 | enc2 >> 4;
        chr2 = (enc2 & 15) << 4 | enc3 >> 2;
        chr3 = (enc3 & 3) << 6 | enc4;
        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
          output = output + String.fromCharCode(chr2);
        }

        if (enc4 != 64) {
          output = output + String.fromCharCode(chr3);
        }
      }

      output = _utf8_decode(output);
      return output;
    };

    Util.prototype.isEmptyObject = function (obj) {
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    };

    Util.prototype.format = function (time, format) {
      var offset_GMT = time.getTimezoneOffset();
      time = new Date(time.getTime() + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000); //转换为东八区时间

      var o = {
        "M+": time.getMonth() + 1,
        //month
        "d+": time.getDate(),
        //day
        "h+": time.getHours(),
        //hour
        "m+": time.getMinutes(),
        //minute
        "s+": time.getSeconds(),
        //second
        "q+": Math.floor((time.getMonth() + 3) / 3),
        //quarter
        "S+": time.getMilliseconds() //millisecond

      };
      if (/(y+)/.test(format)) format = format.replace(RegExp.$1, (time.getFullYear() + "").substr(4 - RegExp.$1.length));

      for (var k in o) {
        if (new RegExp("(" + k + ")").test(format)) format = format.replace(RegExp.$1, RegExp.$1.length == 3 ? ("" + o[k]).length < 3 ? ("00" + o[k]).substr(("00" + o[k]).length - 3, ("00" + o[k]).length) : o[k] : ("00" + o[k]).substr(("" + o[k]).length));
      }

      return format;
    };

    Util.prototype.MD5 = function (value, bit) {
      var sMessage = value;

      function RotateLeft(lValue, iShiftBits) {
        return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
      }

      function AddUnsigned(lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = lX & 0x80000000;
        lY8 = lY & 0x80000000;
        lX4 = lX & 0x40000000;
        lY4 = lY & 0x40000000;
        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
        if (lX4 & lY4) return lResult ^ 0x80000000 ^ lX8 ^ lY8;

        if (lX4 | lY4) {
          if (lResult & 0x40000000) return lResult ^ 0xC0000000 ^ lX8 ^ lY8;else return lResult ^ 0x40000000 ^ lX8 ^ lY8;
        } else return lResult ^ lX8 ^ lY8;
      }

      function F(x, y, z) {
        return x & y | ~x & z;
      }

      function G(x, y, z) {
        return x & z | y & ~z;
      }

      function H(x, y, z) {
        return x ^ y ^ z;
      }

      function I(x, y, z) {
        return y ^ (x | ~z);
      }

      function FF(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
      }

      function GG(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
      }

      function HH(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
      }

      function II(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
      }

      function ConvertToWordArray(sMessage) {
        var lWordCount;
        var lMessageLength = sMessage.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;

        while (lByteCount < lMessageLength) {
          lWordCount = (lByteCount - lByteCount % 4) / 4;
          lBytePosition = lByteCount % 4 * 8;
          lWordArray[lWordCount] = lWordArray[lWordCount] | sMessage.charCodeAt(lByteCount) << lBytePosition;
          lByteCount++;
        }

        lWordCount = (lByteCount - lByteCount % 4) / 4;
        lBytePosition = lByteCount % 4 * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 << lBytePosition;
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
      }

      function WordToHex(lValue) {
        var WordToHexValue = "",
            WordToHexValue_temp = "",
            lByte,
            lCount;

        for (lCount = 0; lCount <= 3; lCount++) {
          lByte = lValue >>> lCount * 8 & 255;
          WordToHexValue_temp = "0" + lByte.toString(16);
          WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
        }

        return WordToHexValue;
      }

      var x = Array();
      var k, AA, BB, CC, DD, a, b, c, d;
      var S11 = 7,
          S12 = 12,
          S13 = 17,
          S14 = 22;
      var S21 = 5,
          S22 = 9,
          S23 = 14,
          S24 = 20;
      var S31 = 4,
          S32 = 11,
          S33 = 16,
          S34 = 23;
      var S41 = 6,
          S42 = 10,
          S43 = 15,
          S44 = 21; // Steps 1 and 2. Append padding bits and length and convert to words 

      x = ConvertToWordArray(sMessage); // Step 3. Initialise 

      a = 0x67452301;
      b = 0xEFCDAB89;
      c = 0x98BADCFE;
      d = 0x10325476; // Step 4. Process the message in 16-word blocks 

      for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
        d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
        c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
        b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
        a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
        d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
        c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
        b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
        a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
        d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
        c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
        b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
        a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
        d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
        c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
        b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
        a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
        d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
        c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
        b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
        a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
        d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
        c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
        b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
        a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
        d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
        c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
        b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
        a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
        d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
        c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
        b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
        a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
        d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
        c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
        b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
        a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
        d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
        c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
        b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
        a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
        d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
        c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
        b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
        a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
        d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
        c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
        b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
        a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
        d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
        c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
        b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
        a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
        d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
        c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
        b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
        a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
        d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
        c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
        b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
        a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
        d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
        c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
        b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
        a = AddUnsigned(a, AA);
        b = AddUnsigned(b, BB);
        c = AddUnsigned(c, CC);
        d = AddUnsigned(d, DD);
      }

      if (bit == 32) {
        return WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
      } else {
        return WordToHex(b) + WordToHex(c);
      }
    };

    Util.prototype.clientTimeZone = function () {
      var munites = new Date().getTimezoneOffset();
      var hour = parseInt(munites / 60);
      var munite = munites % 60;
      var prefix = "-";

      if (hour <= 0 || munite < 0) {
        prefix = "+";
        hour = -hour;

        if (munite < 0) {
          munite = -munite;
        }
      }

      hour = hour + "";
      munite = munite + "";

      if (hour.length == 1) {
        hour = "0" + hour;
      }

      if (munite.length == 1) {
        munite = "0" + munite;
      }

      return prefix + hour + ':' + munite;
    };

    Util.prototype.delEmpty = function (obj) {
      var newObj = {};

      for (var key in obj) {
        var inType = true;
        var valueType = this.paramType(obj[key]);

        if (valueType !== 'Object') {
          if (!obj[key] && (valueType !== 'Number' || isNaN(obj[key])) && valueType !== 'Boolean') {
            inType = false;
          }

          if (inType === true) {
            newObj[key] = obj[key];
          }
        } else {
          newObj[key] = this.delEmpty(obj[key]);
        }
      }

      for (var key in newObj) {
        var values = [];

        for (var key1 in newObj[key]) {
          values.push(newObj[key][key1]);
        }

        if (values.length === 0 && newObj[key].constructor === Object) {
          delete newObj[key];
        }
      }

      return newObj;
    }; // //兼容bind函数
    // if(!Function.prototype.bind){
    //     Function.prototype.bind = function(){
    //         if(typeof this !== 'function'){
    // 　　　　　　throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
    // 　　　　}
    //         var _this = this;
    //         var obj = arguments[0];
    //         var ags = Array.prototype.slice.call(arguments,1);
    //         return function(){
    //             _this.apply(obj,ags);
    //         };
    //     };
    // }


    Util.prototype.addEvent = function (el, type, fn, useCapture) {
      if (document.addEventListener) {
        if (el.length && el !== window) {
          for (var i = 0; i < el.length; i++) {
            this.addEvent(el[i], type, fn, useCapture);
          }
        } else {
          el.addEventListener(type, fn, useCapture);
        }
      } else {
        if (el.length && el !== window) {
          for (var i = 0; i < el.length; i++) {
            this.addEvent(el[i], type, fn);
          }
        } else {
          el.attachEvent('on' + type, function () {
            return fn.call(el, window.event);
          });
        }
      }
    };

    Util.prototype.removeEvent = function (el, type, fn, useCapture) {
      if (document.removeEventListener) {
        if (el.length) {
          for (var i = 0; i < el.length; i++) {
            this.removeEvent(el[i], type, fn, useCapture);
          }
        } else {
          el.removeEventListener(type, fn, useCapture);
        }
      } else {
        if (el.length) {
          for (var i = 0; i < el.length; i++) {
            this.removeEvent(el[i], type, fn);
          }
        } else {
          el.detachEvent('on' + type, function () {
            return fn.call(el, window.event);
          });
        }
      }
    };

    Util.prototype.addWindowEvent = function (type) {
      var orig = history[type];
      return function () {
        var rv = orig.apply(this, arguments);

        if (!document.createEvent) {
          // IE浏览器支持fireEvent方法
          var evt = document.createEventObject();
          evt.arguments = arguments;
          document.fireEvent('on' + type, evt);
        } else {
          // 其他标准浏览器使用dispatchEvent方法
          var evt = document.createEvent('HTMLEvents');
          evt.initEvent(type, true, true);
          evt.arguments = arguments;
          window.dispatchEvent(evt);
        }

        return rv;
      };
    };

    Util.prototype.extend = function (subClass, superClass) {
      var F = function F() {};

      F.prototype = superClass.prototype;
      subClass.prototype = new F();
      subClass.prototype.constructor = subClass;
      subClass.superclass = superClass.prototype;

      if (superClass.prototype.constructor == Object.prototype.constructor) {
        superClass.prototype.constructor = superClass;
      }
    };

    Util.prototype.addEleLable = function (eleName, className, id, parent) {
      var dom = document;
      var createEle = dom.createElement(eleName);
      var domBody = parent || dom.body || dom.getElementsByTagName('body')[0];

      if (id) {
        createEle.id = id;
      }

      if (className) {
        createEle.className = className;
      }

      domBody.appendChild(createEle);
      return createEle;
    };

    Util.prototype.addScript = function (fileName) {
      var dom = document;
      var createScript = dom.createElement('script');
      var domHead = dom.getElementsByTagName('script');
      createScript.type = 'text/javascript';
      createScript.async = true;
      createScript.id = fileName;
      var sdkUrl = '';

      if (dom.getElementById("ARK_SDK")) {
        sdkUrl = dom.getElementById("ARK_SDK").src;
      } else {
        for (var i = 0; i < domHead.length; i++) {
          if (domHead[i].src && domHead[i].src.indexOf("AnalysysAgent_JS_SDK") > -1) {
            sdkUrl = domHead[i].src;
            break;
          }
        }
      }

      var sdkPath = sdkUrl.substring(0, sdkUrl.lastIndexOf("\/") + 1);
      var date = new Date();
      var time = new String(date.getFullYear()) + new String(date.getMonth() + 1) + new String(date.getDate()) + new String(date.getDate());
      createScript.src = sdkPath + fileName + '.min.js?v=' + this.format(new Date(), 'yyyyMMddhhmm'); //方舟B SDK地址

      domHead[0].parentNode.insertBefore(createScript, domHead[0]);
    };

    Util.prototype.unique = function (arr) {
      var a = {};

      for (var i = 0; i < arr.length; i++) {
        if (typeof a[arr[i]] == "undefined") a[arr[i]] = 1;
      }

      arr.length = 0;

      for (var i in a) {
        arr[arr.length] = i;
      }

      return arr;
    };

    function CheckChinese(val) {
      var reg = new RegExp("[\\u4E00-\\u9FFF]+", "g");

      if (reg.test(val)) {
        return true;
      }

      return false;
    }

    Util.prototype.GetUrlParam = function (paraName) {
      var url = document.location.toString();
      var arrObj = url.split("?");

      if (arrObj.length > 1) {
        var arrPara = arrObj[1].split("&");
        var arr;

        for (var i = 0; i < arrPara.length; i++) {
          arr = arrPara[i].split("=");

          if (arr != null && arr[0] == paraName) {
            var value = arr[1];

            if (value.indexOf("%") > -1) {
              try {
                var utfValue = decodeURI(arr[1]);

                if (CheckChinese(utfValue)) {
                  return utfValue;
                }
              } catch (e) {
                return arr[1];
              } // try {
              //     var gbkValue = decodeGBK(arr[1], 'gbk')
              //     if (CheckChinese(gbkValue)) {
              //         return gbkValue
              //     }
              // } catch (e) {
              //     return arr[1];
              // }

            }

            return arr[1];
          }
        }

        return "";
      } else {
        return "";
      }
    };

    Util.prototype.isInArray = function (arr, value) {
      for (var i = 0; i < arr.length; i++) {
        if (value === arr[i]) {
          return true;
        }
      }

      return false;
    };

    Util.prototype.stringSlice = function (str, length) {
      return str.slice(0, length);
    };

    Util.prototype.trim = function (str) {
      if (this.paramType(str) === 'String') {
        return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
      } else {
        return '';
      }
    };

    Util.prototype.changeHash = function (callback) {
      if ('onpopstate' in window) {
        if (!('onpushState' in window)) {
          window.history.pushState = this.addWindowEvent('pushState');
        }

        if (!('onreplaceState' in window)) {
          window.history.replaceState = this.addWindowEvent('replaceState');
        }

        this.addEvent(window, 'popstate', callback);
        this.addEvent(window, 'pushState', callback);
        this.addEvent(window, 'replaceState', callback);

        if (!!window.ActiveXObject || "ActiveXObject" in window) {
          if ('onhashchange' in window) {
            this.addEvent(window, 'hashchange', callback);
          }
        }
      } else if ('onhashchange' in window) {
        if (document.addEventListener) {
          this.addEvent(window, 'hashchange', callback);
        }
      }
    }; // Util.prototype.isPC = function() {
    //     var userAgentInfo = navigator.userAgent;
    //     var Agents = ["Android", "iPhone",
    //         "SymbianOS", "Windows Phone",
    //         "iPad", "iPod"
    //     ];
    //     var flag = true;
    //     for (var v = 0; v < Agents.length; v++) {
    //         if (userAgentInfo.indexOf(Agents[v]) > 0) {
    //             flag = false;
    //             break;
    //         }
    //     }
    //     return flag;
    // }


    Util.prototype.deviceType = function () {
      var u = navigator.userAgent;

      if (u.indexOf('Tablet') > -1 && u.indexOf('PC') < 0 || u.indexOf('Pad') > -1 || u.indexOf('Nexus 7') > -1) {
        return 'tablet';
      }

      if (u.indexOf('Mobi') > -1 || u.indexOf('iPh') > -1 || u.indexOf('480') > -1) {
        return 'phone';
      }

      return 'desktop';
    };

    var Util$1 = new Util();

    /**
     * 存储模块。集中处理本地缓存内容
     * API：
     *  Local相关:永久存储数据相关操作
     *  session相关：临时存储数据相关操作
     *  
     */
    var endings = ['/', ':', '?', '#'];
    var starters = ['.', '/', '@'];

    function getDomainFromUrl(url) {
      if (typeof url !== 'string') {
        return '';
      }

      var domainInc = 0;
      var offsetDomain = 0;
      var offsetStartSlice = 0;
      var offsetPath = 0;
      var len = url.length;
      var i = 0; // Find end offset of domain

      while (len-- && ++i) {
        if (domainInc && endings.toString().indexOf(url[i]) > -1) {
          break;
        }

        if (url[i] !== '.') {
          continue;
        }

        ++domainInc;
        offsetDomain = i;
      }

      offsetPath = i;
      i = offsetDomain; // Find offset before domain name.

      while (i--) {
        // Look for sub domain, protocol or basic auth
        if (starters.toString().indexOf(url[i]) === -1) {
          continue;
        }

        offsetStartSlice = i + 1;
        break;
      } // offsetStartSlice should always be larger than protocol


      if (offsetStartSlice < 2) {
        return '';
      } // Tried several approaches slicing a string. Can't get it any faster than this.


      return url.slice(offsetStartSlice, offsetPath);
    }

    var Local = window.localStorage;
    var Session = window.sessionStorage;

    function Storage() {
      this.localName = 'FZ_STROAGE';
      this.sessionName = 'FZ_SESSION';
      this.localObj = this.getLocal();
      this.sessionObj = this.getSession();
    }

    Storage.prototype.setLocal = function (key, value) {
      this.localObj = this.getLocal();
      this.localObj[key] = value;

      try {
        if (!Local) {
          if (key !== 'POSTDATA' && key != 'ARK_ID') {
            this.setCookie(this.localName, Util$1.encode(JSON.stringify(this.localObj)));
          }
        } else {
          Local.setItem(this.localName, Util$1.encode(JSON.stringify(this.localObj)));
          this.removeCookie(this.localName);
        }
      } catch (e) {}
    };

    Storage.prototype.getLocal = function (key) {
      try {
        var localData = {};

        if (!Local) {
          localData = this.getCookie(this.localName) || Util$1.encode('{}');
        } else {
          localData = Local.getItem(this.localName) || Util$1.encode('{}');
          this.removeCookie(this.localName);
        }

        this.localObj = JSON.parse(Util$1.decode(localData));

        if (!key) {
          return this.localObj;
        }

        return this.localObj[key];
      } catch (e) {
        return {};
      }
    };

    Storage.prototype.removeLocal = function (key) {
      this.localObj = this.getLocal();

      if (Util$1.objHasKay(this.localObj, key)) {
        delete this.localObj[key];
      }

      if (Util$1.isEmptyObject(this.localObj)) {
        try {
          if (!Local) {
            this.removeCookie(this.localName);
          } else {
            Local.removeItem(this.localName);
            this.removeCookie(this.localName);
          }
        } catch (e) {}
      } else {
        if (!Local) {
          if (key !== 'POSTDATA' && key != 'ARK_ID') {
            this.setCookie(this.localName, Util$1.encode(JSON.stringify(this.localObj)));
          }
        } else {
          Local.setItem(this.localName, Util$1.encode(JSON.stringify(this.localObj)));
          this.removeCookie(this.localName);
        }
      }
    };

    Storage.prototype.setSession = function (key, value) {
      this.sessionObj = this.getSession();
      this.sessionObj[key] = value;

      try {
        Session.setItem(this.sessionName, Util$1.encode(JSON.stringify(this.sessionObj)));
      } catch (e) {}
    };

    Storage.prototype.getSession = function (key) {
      try {
        var sessionData = Session.getItem(this.sessionName) || Util$1.encode('{}');
        this.sessionObj = JSON.parse(Util$1.decode(sessionData));

        if (!key) {
          return this.sessionObj;
        }

        return this.sessionObj[key];
      } catch (e) {
        return {};
      }
    };

    Storage.prototype.removeSession = function (key) {
      this.sessionObj = this.getSession();

      if (Util$1.objHasKay(this.sessionObj, key)) {
        delete this.sessionObj[key];
      }

      if (Util$1.isEmptyObject(this.sessionObj)) {
        try {
          Session.removeItem(this.sessionName);
        } catch (e) {}
      } else {
        Session.setItem(this.sessionName, Util$1.encode(JSON.stringify(this.sessionObj)));
      }
    };

    Storage.prototype.setCookie = function (name, value) {
      var urlDomain = getDomainFromUrl(location.href);
      var path = "; path=/";
      var domain = urlDomain ? "" : "; domain=." + urlDomain;
      var date = new Date();
      date.setTime(date.getTime() + 1 * 365 * 24 * 3600 * 1000);
      var time = date.toGMTString();
      document.cookie = name + "=" + value + "; expires=" + time + path + domain;
    };

    Storage.prototype.getCookie = function (name) {
      var text = document.cookie;

      if (typeof text !== "string") {
        return '';
      }

      var nameEQ = name + "=",
          ca = text.split(/[;&]/),
          i,
          c;

      for (i = 0; i < ca.length; i++) {
        c = ca[i];

        while (c.charAt(0) === " ") {
          c = c.substring(1, c.length);
        }

        if (c.indexOf(nameEQ) === 0) {
          return c.substring(nameEQ.length, c.length);
        }
      }
    };

    Storage.prototype.removeCookie = function (name) {
      var urlDomain = getDomainFromUrl(location.href);
      var path = "; path=/";
      var domain = urlDomain ? "" : "; domain=." + urlDomain;
      var date = new Date();
      date.setTime(date.getTime() - 1000);
      var time = date.toGMTString();
      document.cookie = name + "=; expires=" + time + path + domain;
    };

    var Storage$1 = new Storage();

    var UTM = {
      utm_campaign_id: Util$1.GetUrlParam("campaign_id"),
      utm_source: Util$1.GetUrlParam("utm_source") || Util$1.GetUrlParam("hmsr"),
      utm_medium: Util$1.GetUrlParam("utm_medium") || Util$1.GetUrlParam("hmpl"),
      utm_term: Util$1.GetUrlParam("utm_term") || Util$1.GetUrlParam("hmkw"),
      utm_content: Util$1.GetUrlParam("utm_content") || Util$1.GetUrlParam("hmci"),
      utm_campaign: Util$1.GetUrlParam("utm_campaign") || Util$1.GetUrlParam("hmcu")
    };

    function clearUTM() {
      UTM = {
        utm_campaign_id: "",
        utm_source: "",
        utm_medium: "",
        utm_term: "",
        utm_content: "",
        utm_campaign: ""
      };
    }

    function sessionId() {
      this.sessionId = Storage$1.getLocal("SEESIONID") || this.setId();
      this.sessionDate = Storage$1.getLocal("SEESIONDATE") || 0;
    }

    sessionId.prototype.setId = function () {
      var date = +new Date();
      this.sessionId = Util$1.MD5('JS' + date.toString() + Math.random(0, 10000000));
      this.sessionDate = date;
      Storage$1.setLocal("SEESIONID", this.sessionId);
      Storage$1.setLocal("SEESIONDATE", this.sessionDate);
      return this.sessionId;
    };

    sessionId.prototype.getId = function () {
      var date = new Date();
      var nowDate = date.getTime();
      var offset_GMT = date.getTimezoneOffset();
      var nowDay = new Date(nowDate + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000).getDate();
      this.sessionDate = Storage$1.getLocal("SEESIONDATE") || 0;
      var sessionDay = this.sessionDate === 0 ? 0 : new Date(this.sessionDate + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000).getDate();

      if (!this.sessionId || !this.sessionDate || Number(nowDate) - Number(this.sessionDate) > 30 * 60 * 1000 || nowDay !== sessionDay) {
        clearUTM();
        this.setId();
      }

      this.sessionDate = nowDate;
      Storage$1.setLocal("SEESIONDATE", nowDate);
      this.sessionId = Storage$1.getLocal("SEESIONID") || this.setId();
      return this.sessionId;
    };

    var sessionId$1 = new sessionId();

    var endings$1 = ['/', ':', '?', '#'];
    var starters$1 = ['/', '@'];

    function getDomainFromUrl$1(url) {
      if (typeof url !== 'string') {
        return '';
      }

      var domainInc = 0;
      var offsetDomain = 0;
      var offsetStartSlice = 0;
      var offsetPath = 0;
      var len = url.length;
      var i = 0; // Find end offset of domain

      while (len-- && ++i) {
        if (domainInc && endings$1.indexOf(url[i]) > -1) {
          break;
        }

        if (url[i] !== '.') {
          continue;
        }

        ++domainInc;
        offsetDomain = i;
      }

      offsetPath = i;
      i = offsetDomain; // Find offset before domain name.

      while (i--) {
        // Look for sub domain, protocol or basic auth
        if (starters$1.indexOf(url[i]) === -1) {
          continue;
        }

        offsetStartSlice = i + 1;
        break;
      } // offsetStartSlice should always be larger than protocol


      if (url.indexOf('//localhost') > -1) {
        return 'localhost';
      }

      if (offsetStartSlice < 6) {
        return '';
      } // Tried several approaches slicing a string. Can't get it any faster than this.


      return url.slice(offsetStartSlice, offsetPath);
    }

    var domain = function extractDomain(urls) {
      if (typeof urls === 'string') {
        return getDomainFromUrl$1(urls);
      } else if (Array.isArray(urls)) {
        var extractedUrls = [];

        for (var i = 0, _len = urls.length; i < _len; i++) {
          extractedUrls.push(getDomainFromUrl$1(urls[i]));
        }

        return extractedUrls;
      } else {
        return '';
      }
    };

    var UA = navigator.userAgent.toLowerCase();
    /**
     * 1.百度：Baiduspider  Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)
     * 					  百度图片 Baiduspider-image+(+http://www.baidu.com/search/spider.htm)
     * 					  百度PC Mozilla/5.0 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html
     * 					  百度移动端 Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1 (compatible; Baiduspider-render/2.0; +http://www.baidu.com/search/spider.html)
     * 					  
     * 2.谷歌：Googlebot   Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html) 
     * 					Google图片 AdsBot-Google-Mobile (+http://www.google.com/mobile/adsbot.html) Mozilla (iPhone; U; CPU iPhone OS 3 0 like Mac OS X) AppleWebKit (KHTML, like Gecko) Mobile Safari
     * 3.360蜘蛛：360Spider 360搜索  Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0);
     * 					  360网站安全 360spider (http://webscan.360.cn)
     * 4.Bing爬虫: bingbot  Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)
     * 5.腾讯搜搜蜘蛛：Sosospider  Sosospider+(+http://help.soso.com/webspider.htm)
     * 							搜搜图片 Sosoimagespider+(+http://help.soso.com/soso-image-spider.htm)
     * 6.雅虎蜘蛛：Yahoo!   雅虎英文 Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)
     * 					雅虎中国 Mozilla/5.0 (compatible; Yahoo! Slurp China; http://misc.yahoo.com.cn/help.html)
     * 4.有道蜘蛛：YoudaoBot Mozilla/5.0 (compatible; YoudaoBot/1.0; http://www.youdao.com/help/webmaster/spider/; )
     * 8.搜狗蜘蛛：Sogou News Spider   Sogou web spider/4.0(+http://www.sogou.com/docs/help/webmasters.htm#07)
     * 								Sogou Pic Spider/3.0(+http://www.sogou.com/docs/help/webmasters.htm#07)
     * 9.瑞典 Speedy Spider: Speedy Spider  Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) Speedy Spider (http://www.entireweb.com/about/search_tech/speedy_spider/)
     * 10.俄罗斯 yandex : YandexBot Mozilla/5.0 (compatible; YandexBot/3.0; +http://yandex.com/bots)
     * 11.MSN蜘蛛：msnbot/msnbot-media msnbot/1.1 (+http://search.msn.com/msnbot.htm)
     * 12.必应蜘蛛：bingbot/compatible Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)
     * 13.听云爬虫：networkbench Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv: 11.0;NetworkBench/8.0.1.309-5774440-2481662) like Gecko
     * 14.Alexa蜘蛛：ia_archiver ia_archiver/8.9 (Windows NT 3.1; en-US;)
     * 15.宜sou蜘蛛：EasouSpider Mozilla/5.0 (compatible; EasouSpider; +http://www.easou.com/search/spider.html)
     * 16.华为赛门铁克蜘蛛：HuaweiSymantecSpider  HuaweiSymantecSpider/1.0+DSE-support@huaweisymantec.com+(compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR ; http://www.huaweisymantec.com/cn/IRL/spider)
     * 17.七牛镜像蜘蛛：qiniu qiniu-imgstg-spider-1.0
     * 18.DNSPod监控：DNSPod  DNSPod-Monitor/2.0
     * 19.俄罗斯 LinkpadBot：LinkpadBot   Mozilla/5.0 (compatible; LinkpadBot/1.06; +http://www.linkpad.ru)
     * 20.英国 MJ12bot：MJ12bot   Mozilla/5.0 (compatible; MJ12bot/v1.4.0; http://www.majestic12.co.uk/bot.php?+)
     * 21.即刻蜘蛛：JikeSpider
     * 22.一淘网蜘蛛：EtaoSpider Mozilla/5.0 (compatible; EtaoSpider/1.0; EtaoSpider)
     * 23.人工智能爬虫：crawler Mozilla/5.0 (compatible; 008/0.83; http://www.80legs.com/webcrawler.html) Gecko/2008032620
     * 24.Scrapy爬虫： scrapy
     * 25.监控宝：jiankongbao Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; JianKongBao Monitor 1.1)
     * 26.OneAPM爬虫:OneAPM FFAgent Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0: OneAPM FFAgent)Gecko/20100101 Firefox/39.0
     * 27.PhantomJS:PhantomJS 	Mozilla/5.0 (Unknown; Linux x86_64)AppleWebKit/538. 1 (KHTML,like Gecko)PhantomJS/2.1.1 Safari/538.1
     */

    function checkSpider() {
      if (UA.match(/(bot|crawler|spider|scrapy|dnspod|ia_archiver|jiankongbao|slurp|transcoder|networkbench|oneapm|PhantomJS)/i)) {
        return true;
      }

      return false;
    }

    /**
     * 用户ID 操作集
     * ARK_LOGINID>ARK_TRACKID>ARK_ID
     */

    function getId() {
      var id = Storage$1.getLocal('ARK_LOGINID') || Storage$1.getLocal('ARK_TRACKID') || Storage$1.getLocal('ARK_ID');

      if (!id) {
        id = setUUId();
        Storage$1.setLocal('ARK_ID', id);
      } // if(!Storage.getCookie("ARK_ID")){


      Storage$1.setCookie('ARK_ID', getIdentifyId() || getUUId()); // }

      return id;
    }

    function setUUId() {
      var timeRandom = new String(new Date().getTime()) + new String(Math.random() * 10000);
      var id = 'JS' + Util$1.MD5(new String(timeRandom), 32) + Util$1.MD5(new String(timeRandom), 32).slice(0, 4);
      var storageId = Storage$1.getCookie("ARK_ID");

      if (storageId && storageId.length > 10) {
        id = Storage$1.getCookie("ARK_ID");
      }

      Storage$1.setCookie("ARK_ID", id);
      return id;
    }

    function getUUId() {
      var id = Storage$1.getLocal('ARK_ID');

      if (!id) {
        id = setUUId();
        Storage$1.setLocal('ARK_ID', id);
      }

      return id;
    }

    function removeUUId() {
      Storage$1.removeLocal('ARK_ID');
    }

    function getAliasId() {
      return Storage$1.getLocal('ARK_LOGINID');
    }

    function removeAliasId() {
      Storage$1.removeLocal('ARK_LOGINID');
    }

    function getIdentifyId() {
      return Storage$1.getLocal('ARK_TRACKID');
    }

    function removeIdentifyId() {
      Storage$1.removeLocal('ARK_TRACK_LOGIN');
      Storage$1.removeLocal('ARK_TRACKID');
    }

    var base = baseConfig.base;

    function appkey(appkey) {
      base.appid = appkey;
    }

    function getAppId() {
      return base.appid;
    }

    function debugMode(debug) {
      base.$debug = debug;
    }

    function getDebugMode() {
      return base.$debug;
    }

    function uploadURL(url) {
      if (url.charAt(url.length - 1) !== "/") {
        url += '/';
      }

      base.uploadURL = url;
    }

    function getUploadURL(url) {
      if (base.uploadURL.charAt(base.uploadURL.length - 1) !== "/") {
        base.uploadURL += '/';
      }

      return base.uploadURL;
    }

    function nowDate() {
      return +new Date() + (Storage$1.getLocal("ANSSERVERTIME") ? Number(Storage$1.getLocal("ANSSERVERTIME")) : 0);
    }

    function timeCalibration() {
      if (Storage$1.getLocal("ANSSERVERTIME")) {
        return true;
      }

      return false;
    }

    function getXwhat() {
      return baseConfig.status.FnName;
    }

    function isLogin() {
      return getAliasId() || Storage$1.getLocal('ARK_TRACK_LOGIN') ? true : false;
    }

    var time_zone = 'GMT' + Util$1.clientTimeZone();
    var language = (navigator.language || navigator.browserLanguage).toLowerCase(); // var device_type = deviceType

    function getSessionId() {
      return sessionId$1.getId();
    }

    function is_first_time() {
      var timeStatus = Storage$1.getLocal("FRISTIME");
      Storage$1.setLocal("FRISTIME", false);
      return timeStatus;
    }

    function is_first_day() {
      var date = new Date();
      var year = date.getFullYear();
      var month = date.getMonth() + 1;
      month = month < 10 ? '0' + month : month;
      var day = date.getDate();
      day = day < 10 ? '0' + day : day;
      var todayDate = year + '' + month + '' + day;
      var storageDay = Storage$1.getLocal("FRISTDAY");

      if (storageDay && todayDate !== storageDay) {
        return false;
      } // Storage.setLocal("FRISTDAY", todayDate)


      return true;
    }

    function original_id() {
      return getIdentifyId() || getUUId();
    }

    function getReferrer() {
      return document.referrer;
    }

    function getReferrerDomain() {
      return domain(document.referrer);
    }

    function getTitle() {
      return document.title;
    }

    function startup_time() {
      return Storage$1.getSession("STARTUPTIME") || '';
    }

    function getUrl() {
      return window.location.href;
    }

    function getLibVersion() {
      return base.$lib_version;
    }
    /**
     * UTM参数控制逻辑
     * UTM参数改变切换session
     * UTM参数不满足条件 清空UTM参数
     */


    var old_UTM = Storage$1.getSession('ARK_UTM') || '';

    if (UTM.utm_campaign && UTM.utm_source && UTM.utm_medium) {
      if (old_UTM !== JSON.stringify(UTM)) {
        sessionId$1.setId();
      }

      Storage$1.setSession('ARK_UTM', JSON.stringify(UTM));
    } else {
      clearUTM();
      Storage$1.removeSession('ARK_UTM');
    }

    function utm_campaign_id() {
      return UTM.utm_campaign_id;
    }

    function utm_source() {
      return UTM.utm_source;
    }

    function utm_medium() {
      return UTM.utm_medium;
    }

    function utm_term() {
      return UTM.utm_term;
    }

    function utm_content() {
      return UTM.utm_content;
    }

    function utm_campaign() {
      return UTM.utm_campaign;
    }

    var getField = ({
        __proto__: null,
        getAppId: getAppId,
        getId: getId,
        getUploadURL: getUploadURL,
        appkey: appkey,
        debugMode: debugMode,
        uploadURL: uploadURL,
        getDebugMode: getDebugMode,
        nowDate: nowDate,
        getXwhat: getXwhat,
        isLogin: isLogin,
        time_zone: time_zone,
        language: language,
        getSessionId: getSessionId,
        is_first_time: is_first_time,
        is_first_day: is_first_day,
        original_id: original_id,
        getReferrer: getReferrer,
        getReferrerDomain: getReferrerDomain,
        getTitle: getTitle,
        getUrl: getUrl,
        startup_time: startup_time,
        checkSpider: checkSpider,
        getLibVersion: getLibVersion,
        utm_campaign_id: utm_campaign_id,
        utm_source: utm_source,
        utm_medium: utm_medium,
        utm_term: utm_term,
        utm_content: utm_content,
        utm_campaign: utm_campaign,
        timeCalibration: timeCalibration
    });

    /**
     * 字段填充、字段校验规则模板
     * 
     * ReservedKeywords：不可覆盖字段集合
     * 
     * valueType：获取字段值的方式 0：函数获取  1：默认值  
     *
     * value：根据valueType规则填充字段对应取值
     *
     * checkList：数据合法检测方法列表，每个方法返回bool值，以用户为准，同名覆盖
     * 
     */
    var fieldRules = {
      resetKeywords: ["appid", "$debug", "uploadUrl"],
      uploadURL: {
        valueType: 0,
        value: getUploadURL,
        check: {
          value: ["isString", "nimLength", "isUrl"],
          errorCode: '60007',
          successCode: '20008'
        }
      },
      appid: {
        valueType: 0,
        value: getAppId,
        check: {
          value: ["isString", "nimLength"],
          errorCode: '60006',
          successCode: '20006'
        }
      },
      hash: {
        check: {
          value: ["isBoolean"],
          errorCode: '60003'
        }
      },
      auto: {
        check: {
          value: ["isBoolean"],
          errorCode: '60003'
        }
      },
      autoProfile: {
        check: {
          value: ["isBoolean"],
          errorCode: '60003'
        }
      },
      pageProperty: {
        check: {
          value: ["isObject"],
          errorCode: '600016'
        }
      },
      xwho: {
        valueType: 0,
        value: getId,
        check: {
          value: ["isString", "nimLength"]
        }
      },
      xwhen: {
        valueType: 0,
        value: nowDate
      },
      xwhat: {
        valueType: 0,
        value: getXwhat,
        check: {
          value: ["isString", "nimLength"]
        }
      },
      xcontext: {
        $lib: {
          valueType: 1,
          value: "JS"
        },
        $lib_version: {
          valueType: 0,
          value: getLibVersion,
          check: {
            value: ["isString"],
            successCode: '20007'
          }
        },
        $platform: {
          valueType: 1,
          value: "JS"
        },
        $debug: {
          valueType: 0,
          value: getDebugMode,
          check: {
            value: ["isNumber", "isDebug"]
          }
        },
        $is_login: {
          valueType: 0,
          value: isLogin,
          check: {
            value: ["isBoolean"]
          }
        },
        $screen_width: {
          valueType: 1,
          value: window.screen.width,
          check: {
            value: ["isNumber"]
          }
        },
        $screen_height: {
          valueType: 1,
          value: window.screen.height,
          check: {
            value: ["isNumber"]
          }
        },
        $time_zone: {
          valueType: 1,
          value: time_zone
        },
        $language: {
          valueType: 1,
          value: language
        },
        $session_id: {
          valueType: 0,
          value: getSessionId
        },
        $is_first_time: {
          valueType: 0,
          value: is_first_time
        },
        $is_first_day: {
          valueType: 0,
          value: is_first_day
        },
        $referrer: {
          valueType: 0,
          value: getReferrer
        },
        $referrer_domain: {
          valueType: 0,
          value: getReferrerDomain
        },
        $title: {
          valueType: 0,
          value: getTitle
        },
        $url: {
          valueType: 0,
          value: getUrl
        },
        $startup_time: {
          valueType: 0,
          value: startup_time
        },
        $web_crawler: {
          valueType: 0,
          value: checkSpider
        },
        $original_id: {
          valueType: 0,
          value: original_id
        },
        $utm_campaign_id: {
          valueType: 0,
          value: utm_campaign_id
        },
        $utm_source: {
          valueType: 0,
          value: utm_source
        },
        $utm_medium: {
          valueType: 0,
          value: utm_medium
        },
        $utm_term: {
          valueType: 0,
          value: utm_term
        },
        $utm_content: {
          valueType: 0,
          value: utm_content
        },
        $utm_campaign: {
          valueType: 0,
          value: utm_campaign
        },
        $is_time_calibrated: {
          valueType: 0,
          value: timeCalibration
        }
      },
      xcontextCommonRule: {
        check: {
          key: ["isString", "length99", "notSpecialCharacters", "keywords"],
          value: ["notObject", "isArrayString", "length255"]
        }
      },
      $track: {
        check: {
          key: ["isString", "notSpecialCharacters", "length99"]
        }
      },
      $alias: {
        check: {
          key: ["isString", "keyLength255"]
        }
      },
      $profile_increment: {
        check: {
          key: ["isString", "length99", "notSpecialCharacters"],
          value: ["isNumber"]
        }
      },
      $profile_unset: {
        check: {
          key: ["isString", "length99", "notSpecialCharacters"]
        }
      },
      $pageview: {
        check: {
          key: ["isString", "keyLength255"]
        }
      }
    };

    var lifecycle = {};

    /**
     * 字段填充、字段校验规则模板
     * 
     * check：数据合法检测方法列表，每个方法返回bool值，以用户为准，同名覆盖
     * 
     */
    var fieldRules$1 = {
      "visitorConfigURL ": {
        check: {
          value: ["isUrl"]
        }
      }
    };

    /**
     * SDK 基础字段定义表
     * base.outer：上报日志基础结构定义
     * base.xcontext:上报报文找中xcontext下的共有字段定义
     * $开头的字段为各个事件特殊拥有字段
     */
    var fieldTemplate$1 = {};

    function getElementContent(ele) {
      var text = ele.innerText;
      var ele_content = '';

      if (ele.textContent) {
        ele_content = Util$1.trim(ele.textContent);
      } else {
        if (ele.innerText) {
          ele_content = Util$1.trim(ele.innerText);
        }
      }

      if (ele.tagName.toLowerCase() == 'input' && (ele.type == 'button' || ele.type == 'submit')) {
        ele_content = Util$1.trim(ele.value) || '';
      }

      if (ele_content) {
        ele_content = ele_content.replace(/[\r\n]/g, " ").replace(/[ ]+/g, " ").substring(0, 255);
      }

      return ele_content;
    }

    function parseEvent(obj) {
      var path = obj.link;
      var index = obj.index;
      var eleObj = parserDom(path);

      if (eleObj.length === 0) {
        return;
      }

      var baseEle = eleObj[0];
      var eleList = document.querySelectorAll(baseEle.link);
      var allEleList = [];

      for (var i = 0; i < eleList.length; i++) {
        if (domParentList(eleList[i]) === path) {
          allEleList.push(eleList[i]);
        }
      }

      eleList = [];
      obj.ele = allEleList[index];
      return {
        allEleList: allEleList,
        obj: obj,
        index: index
      };
    }

    function parserDom(path) {
      var eleList = [];

      if (path.indexOf("<") < 0) {
        return eleList;
      }

      var pathObj = path.split("<");

      for (var i = 0; i < pathObj.length; i++) {
        var link = pathObj[i].split("#");
        eleList.push({
          link: link[0]
        });

        if (link.length > 1) {
          eleList.push({
            link: '#' + link[1]
          });
        }
      }

      return eleList;
    }

    function isParent(obj, parentObj) {
      while (obj != undefined && obj != null && obj.tagName.toUpperCase() != 'BODY') {
        if (obj == parentObj) {
          return true;
        }

        obj = obj.parentNode;
      }

      return false;
    }

    function domParentList(ele) {
      var list = [];
      var parent = ele;

      while (parent != null) {
        var tagName = parent.tagName;

        if (!tagName) {
          break;
        }

        tagName = tagName.toLowerCase();
        var parentID = parent.id ? '#' + parent.id : '';

        if (parent.classList && parent.classList.length > 0) {
          var classList = '';

          for (var i = 0; i < parent.classList.length; i++) {
            if (parent.classList[i].indexOf('ARK') < 0) {
              classList += '.' + parent.classList[i];
            }
          }

          list.push(tagName + parentID + classList);
        } else {
          list.push(tagName + parentID);
        }

        parent = parent.parentNode;
      }

      return list.join('<');
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var _typeof_1 = createCommonjsModule(function (module) {
    function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

    function _typeof(obj) {
      if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
        module.exports = _typeof = function _typeof(obj) {
          return _typeof2(obj);
        };
      } else {
        module.exports = _typeof = function _typeof(obj) {
          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
        };
      }

      return _typeof(obj);
    }

    module.exports = _typeof;
    });

    // import base64js from './base64js.min.js'

    function getJSON(data) {
      if (data.indexOf("\n") > -1) {
        data = data.replace(/[\r\n]/g, "");
      }

      if (_typeof_1(data) === 'object') {
        return data;
      }

      try {
        return JSON.parse(data);
      } catch (e) {
        return {};
      }
    }

    function getHttpObj() {
      var httpobj = null;

      if (window.XDomainRequest) {
        return new XDomainRequest();
      }

      if (window.XMLHttpRequest) {
        httpobj = new XMLHttpRequest();
      } else {
        try {
          httpobj = new ActiveXObject('Microsoft.XMLHTTP');
        } catch (e) {
          try {
            httpobj = new ActiveXObject("Msxml2.XMLHTTP");
          } catch (e1) {
            httpobj = new XMLHttpRequest();
          }
        }
      }

      return httpobj;
    }

    function xmlhttp(_this) {
      var sendStatus = false;
      var xhr = new getHttpObj(); // xhr.setRequestHeader("reqt",+new Date())
      // xhr.setRequestHeader("reqv",1)

      xhr.onload = function (data) {
        if (sendStatus) return;
        sendStatus = true;

        _this.success(getJSON(xhr.responseText), xhr);
      };

      xhr.onerror = function (data) {
        if (sendStatus) return;
        sendStatus = true;

        _this.error(getJSON(xhr.responseText), xhr);
      };

      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4) {
          try {
            if (xhr.getAllResponseHeaders().indexOf('Date') > -1 || xhr.getAllResponseHeaders().indexOf('date') > -1) {
              var time = +new Date();
              var date = xhr.getResponseHeader('Date') || xhr.getResponseHeader('date');

              if (date) {
                Storage$1.setLocal('ANSSERVERTIME', +new Date(date) - time);
              }
            }
          } catch (e) {}

          if (xhr.status >= 200 && xhr.status < 300 || xhr.status == 304) {
            if (sendStatus) return;
            sendStatus = true;

            _this.success(getJSON(xhr.responseText), xhr);
          } else {
            if (sendStatus) return;
            sendStatus = true;

            _this.error();
          }

          xhr.onreadystatechange = null;
          xhr.onload = null;
        }
      };

      try {
        xhr.open(_this.type, _this.url, true); // xhr.setRequestHeader("Content-Type","multipart/form-data")

        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

        if (_this.type === 'GET') {
          xhr.send(null);
        } else {
          xhr.send(_this.data);
        }
      } catch (e) {}
    } // function lengthBaty(str) {
    //     var bytesCount = 0
    //     for (var i = 0; i < str.length; i++) {
    //         var c = str.charAt(i);
    //         if (/^[\u0000-\u00ff]$/.test(c)) //匹配双字节
    //         {
    //             bytesCount += 1;
    //         } else {
    //             bytesCount += 2;
    //         }
    //     }
    //     return bytesCount
    // }


    function ajax() {
      this.xhr = getHttpObj();
      this.url = '';
      this.data = '';
      this.type = 'GET';

      this.success = function () {};

      this.error = function () {};
    }

    ajax.prototype.get = function (option) {
      var param = [];

      for (var key in option.data) {
        param.push(key + '=' + encodeURIComponent(option.data[key]));
      }

      var url = option.url.indexOf('?') > -1 ? option.url + '&' + param.join('&') : option.url + '?' + param.join('&');
      this.url = url;
      this.data = option.data;
      this.type = 'GET';

      this.success = option.success || function () {};

      this.error = option.error || function () {};

      xmlhttp(this);
    };

    ajax.prototype.post = function (option) {
      this.url = option.url;
      this.data = option.data;
      this.type = 'POST';

      this.success = option.success || function () {};

      this.error = option.error || function () {};

      xmlhttp(this);
    };

    var visitorConfig = {};

    function loadVisitorSDK() {
      Util$1.addScript('AnalysysAgent_JS_SDK_VISUAL');
      window.ARK_VISUAL = {
        config: visitorConfig
      };
      Storage$1.setSession('visitor', true);
    }

    function setIndex(ele, likeDomList) {
      var link = domParentList(ele);
      var eleObj = parserDom(link);

      if (eleObj.length === 0) {
        return;
      }

      var baseEle = eleObj[0];
      var eleList = document.querySelectorAll(baseEle.link);
      var allEleList = [];

      for (var i = 0; i < eleList.length; i++) {
        if (domParentList(eleList[i]) === link) {
          allEleList.push(eleList[i]);
        }
      }

      for (var i = 0; i < allEleList.length; i++) {
        if (allEleList[i] === ele) {
          return i;
        }
      }

      return 0;
    }

    function addElesListener(event) {
      var e = event || window.event;

      if (e.touches && e.touches.length > 0) {
        e = e.touches[0];
      }

      var ele = e.target || e.srcElement;
      var elePath = domParentList(ele);
      var eleIndex = setIndex(ele);

      for (var i = 0; i < visitorEventList.length; i++) {
        // var link = visitorEventList[i].link
        var index = visitorEventList[i].index;
        var eventName = visitorEventList[i].appEventId;
        var visualEle = parseEvent(visitorEventList[i]);

        if (visualEle.allEleList[index] == ele || isParent(ele, visualEle.allEleList[index]) || eleIndex == index && elePath == visitorEventList[i].link) {
          // if (eleIndex == index) {
          var isText = visitorEventList[i].isText;

          if (isText) {
            var eleText = getElementContent(ele);

            if (isText === eleText) {
              AnalysysAgent.track(eventName);
            }
          } else {
            AnalysysAgent.track(eventName);
          } // }

        }
      }
    }

    var visitorEventList = [];

    function getVisitorEvent() {
      var visitorUrl = visitorConfig.visitorConfigURL;

      var success = function success(data) {
        if (data.code !== 0) {
          return;
        }

        visitorEventList = data.data;
      };

      var hash = window.location.hash;

      if (hash.indexOf("?") > -1) {
        hash = hash.split("?")[0];
      }

      var url = window.location.protocol + '//' + window.location.host + window.location.pathname + hash;
      var option = {
        url: visitorUrl,
        data: {
          appkey: visitorConfig.appid,
          lib: "Js",
          url: url
        },
        success: success,
        error: function error() {}
      };
      new ajax().get(option);
    }
    var url = window.location.href;

    function visitorPageViewInit(config) {
      if (config.visitorConfigURL) {

        if (config.visitorConfigURL.charAt(config.visitorConfigURL.length - 1) !== "/") {
          config.visitorConfigURL += '/';
        }

        config.visitorConfigURL = config.visitorConfigURL + 'configure';
        getVisitorEvent();

        if (Util$1.deviceType() == 'desktop') {
          Util$1.addEvent(document, 'click', addElesListener);
        } else {
          Util$1.addEvent(document, 'touchstart', addElesListener);
        }

        Util$1.changeHash(function () {
          if (url != window.location.href) {
            url = window.location.href;
            getVisitorEvent();
          }
        });
      }
    }

    function visitorInit(config) {
      visitorConfig = config;

      if (Util$1.paramType(window.top) != 'Undefined' && top !== self && (window.location.href.indexOf("visual=true") > -1 || Storage$1.getSession('visitor') == true)) {
        loadVisitorSDK();
      } else {
        visitorPageViewInit(config);
      }

      return config;
    }

    var lifecycle$1 = {
      AnalysysAgent: {
        init: visitorInit
      }
    };



    var visitor = ({
        __proto__: null,
        fieldRules: fieldRules$1,
        fieldTemplate: fieldTemplate$1,
        lifecycle: lifecycle$1
    });

    function getViewPortWidth() {
      return document.documentElement.clientWidth || document.body.clientWidth;
    } // 获取浏览器窗口的可视区域的高度


    function getViewPortHeight() {
      return document.documentElement.clientHeight || document.body.clientHeight;
    } // 获取浏览器窗口垂直滚动条的位置


    function getScrollTop() {
      return document.documentElement.scrollTop || document.body.scrollTop;
    }

    var startDate = +new Date() + (Storage$1.getLocal("ANSSERVERTIME") ? Number(Storage$1.getLocal("ANSSERVERTIME")) : 0);

    function getDuration() {
      var nowTime = +new Date() + (Storage$1.getLocal("ANSSERVERTIME") ? Number(Storage$1.getLocal("ANSSERVERTIME")) : 0);
      var duration = nowTime - startDate;
      startDate = nowTime;
      return duration;
    }

    function getDeviceType() {
      return Util$1.deviceType();
    }

    /**
     * 字段填充、字段校验规则模板
     * 
     * check：数据合法检测方法列表，每个方法返回bool值，以用户为准，同名覆盖
     * 
     */
    var fieldRules$2 = {
      autoWebstay: {
        check: {
          value: ["isBoolean"]
        }
      },
      xcontext: {
        $viewport_width: {
          valueType: 0,
          value: getViewPortWidth
        },
        $viewport_position: {
          valueType: 0,
          value: getScrollTop
        },
        $viewport_height: {
          valueType: 0,
          value: getViewPortHeight
        },
        $event_duration: {
          valueType: 0,
          value: getDuration
        },
        $device_type: {
          valueType: 0,
          value: getDeviceType
        }
      }
    };

    /**
     * SDK 基础字段定义表
     * base.outer：上报日志基础结构定义
     * base.xcontext:上报报文找中xcontext下的共有字段定义
     * $开头的字段为各个事件特殊拥有字段
     */
    var fieldTemplate$2 = {
      $webstay: {
        xcontext: ["$referrer", "$referrer_domain", "$title", "$url", "$viewport_width", "$viewport_position", "$viewport_height", "$event_duration", "$device_type", "$session_id", "$is_time_calibrated", "$is_first_day"]
      }
    };

    var interval = null;
    var topValue = 0;

    function initWebStay() {
      var scroll = window.onscroll;

      window.onscroll = function () {
        if (scroll && Util$1.paramType(scroll) === 'Function') {
          scroll();
        }

        clearTimeout(interval);
        interval = setTimeout(isScroll, 1000);
        topValue = document.documentElement.scrollTop || document.body.scrollTop;
      };

      function isScroll() {
        var m2 = document.documentElement.scrollTop || document.body.scrollTop;

        if (topValue === m2) {
          clearTimeout(interval);
          interval = null;

          if (!AnalysysAgent || !AnalysysAgent.freeApi) {
            setTimeout(function () {
              isScroll();
            }, 100);
          } else {
            AnalysysAgent.freeApi('$webstay');
          }
        }
      }

      setTimeout(startScroll, 1000);
    }

    function startScroll() {
      var fristScrollTop = document.documentElement.scrollTop || document.body.scrollTop;

      if (fristScrollTop == 0) {
        if (!AnalysysAgent || !AnalysysAgent.freeApi) {
          setTimeout(function () {
            startScroll();
          }, 100);
        } else {
          AnalysysAgent.freeApi('$webstay');
        }
      }
    }

    function autoWebstayInit(config) {
      if (config.autoWebstay === true) {
        initWebStay();
      }

      return config;
    }

    var lifecycle$2 = {
      AnalysysAgent: {
        init: autoWebstayInit
      }
    };



    var webstay = ({
        __proto__: null,
        fieldRules: fieldRules$2,
        fieldTemplate: fieldTemplate$2,
        lifecycle: lifecycle$2
    });

    var elePostion = {
      ele: '',
      click_x: 0,
      click_y: 0
    };

    function domParentList$1(ele) {
      var list = [];
      var parent = ele;

      while (parent != null) {
        var index = 0;

        if (parent.parentNode) {
          var clildrenEles = parent.parentNode.children;

          if (clildrenEles) {
            for (var i = 0; i < clildrenEles.length; i++) {
              if (clildrenEles[i] == parent) {
                index = i;
              }
            }
          }
        }

        var tagName = parent.tagName;

        if (!tagName) {
          parent = parent.parentNode;
          continue;
        }

        tagName = tagName.toLowerCase();
        var parentID = parent.id ? '#' + parent.id : '';

        if (parent.classList && parent.classList.length > 0) {
          var classList = '';

          for (var i = 0; i < parent.classList.length; i++) {
            if (parent.classList[i] && parent.classList[i].indexOf('ARK') < 0) {
              classList += '.' + parent.classList[i];
            }
          }

          list.push(tagName + parentID + classList + '|' + index);
        } else {
          list.push(tagName + parentID + '|' + index);
        }

        parent = parent.parentNode;
      }

      return list.join('<');
    }

    function getPageWidth() {
      return document.documentElement.scrollWidth;
    }

    function getPageHeight() {
      return document.documentElement.scrollHeight;
    }

    function getClickX() {
      return elePostion.click_x;
    }

    function getClickY() {
      return elePostion.click_y;
    }

    function getElementPath() {
      return domParentList$1(elePostion.ele);
    }

    function getUrlPath() {
      return location.protocol + '//' + location.host + location.pathname + location.hash;
    }

    function getElementX() {
      return elePostion.elementX;
    }

    function getElementY() {
      return elePostion.elementY;
    }

    function getElementType() {
      return elePostion.ele.tagName.toLowerCase();
    }

    function getElementClickable() {
      var tagName = getElementType();
      var clickableElementList = ['a', 'button', 'input', 'select', 'textarea', 'svg']; //option无法触发点击事件

      if (clickableElementList.indexOf(tagName) > -1) {
        if (tagName == 'svg' && elePostion.ele.children && elePostion.ele.children.length > 0) {
          var svgIsClickable = 0;
          var svgChildren = elePostion.ele.children;

          for (var i = 0; i < svgChildren.length; i++) {
            if (svgChildren[i].tagName.toLowerCase() == 'use' && svgChildren[i].getAttribute("xlink:href")) {
              svgIsClickable = 1;
            }
          }

          return svgIsClickable;
        }

        return 1;
      }

      return 0;
    }

    function getEleContent() {
      return getElementContent(elePostion.ele);
    }

    function getDeviceType$1() {
      return Util$1.deviceType();
    }

    function getElementId() {
      return elePostion.ele.id || elePostion.ele.getAttribute('id') || '';
    }

    function getElementName() {
      return elePostion.ele.getAttribute('name') || '';
    }

    function getElementClassName() {
      return elePostion.ele.className || '';
    }

    function getElementTargetUrl() {
      return elePostion.ele.getAttribute('href') || '';
    }

    /**
     * 字段填充、字段校验规则模板
     * 
     * check：数据合法检测方法列表，每个方法返回bool值，以用户为准，同名覆盖
     * 
     */
    var fieldRules$3 = {
      autoHeatmap: {
        check: {
          value: ["isBoolean"]
        }
      },
      xcontext: {
        $page_width: {
          valueType: 0,
          value: getPageWidth
        },
        $page_height: {
          valueType: 0,
          value: getPageHeight
        },
        $click_x: {
          valueType: 0,
          value: getClickX
        },
        $click_y: {
          valueType: 0,
          value: getClickY
        },
        $element_path: {
          valueType: 0,
          value: getElementPath
        },
        $url_path: {
          valueType: 0,
          value: getUrlPath
        },
        $element_x: {
          valueType: 0,
          value: getElementX
        },
        $element_y: {
          valueType: 0,
          value: getElementY
        },
        $element_type: {
          valueType: 0,
          value: getElementType
        },
        $element_clickable: {
          valueType: 0,
          value: getElementClickable
        },
        $element_content: {
          valueType: 0,
          value: getEleContent
        },
        $device_type: {
          valueType: 0,
          value: getDeviceType$1
        },
        $element_id: {
          valueType: 0,
          value: getElementId
        },
        $element_name: {
          valueType: 0,
          value: getElementName
        },
        $element_target_url: {
          valueType: 0,
          value: getElementTargetUrl
        },
        $element_class_name: {
          valueType: 0,
          value: getElementClassName
        }
      }
    };

    /**
     * SDK 基础字段定义表
     * base.outer：上报日志基础结构定义
     * base.xcontext:上报报文找中xcontext下的共有字段定义
     * $开头的字段为各个事件特殊拥有字段
     */
    var fieldTemplate$3 = {
      $web_click: {
        xcontext: ["$page_width", "$page_height", "$click_x", "$click_y", "$element_path", "$url_path", "$url", "$title", "$session_id", "$device_type", "$session_id", "$is_time_calibrated", "$element_x", "$element_y", "$element_type", "$element_clickable", "$element_content", "$is_first_day", "$element_id", "$element_name", "$element_target_url", "$element_class_name"]
      }
    };

    var heatmapConfig = {};

    function loadHeatmapSDK() {
      if (!document.body || !document.getElementsByTagName('body')[0]) {
        setTimeout(loadHeatmapSDK, 50);
        return;
      }

      Util$1.addScript('AnalysysAgent_JS_SDK_HEATMAP');
      window.ARK_HEATMAP = {
        config: heatmapConfig
      };
    }

    function offset(obj, direction) {
      var fristText = direction.split("")[0]; //将top,left首字母大写,并拼接成offsetTop,offsetLeft

      var offsetDir = 'offset' + fristText.toUpperCase() + direction.substring(1);
      var realNum = obj[offsetDir];
      var positionParent = obj.offsetParent; //获取上一级定位元素对象

      while (positionParent != null) {
        realNum += positionParent[offsetDir];
        positionParent = positionParent.offsetParent;
      }

      return realNum;
    }

    function addClickEvent(event) {
      var e = event || window.event;

      if (e.touches && e.touches.length > 0) {
        e = e.touches[0];
      } // e.stopPropagation();
      // e.preventDefault();


      var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
      var scrollY = document.documentElement.scrollTop || document.body.scrollTop; // var x = e.pageX || e.clientX + scrollX;
      // var y = e.pageY || e.clientY + scrollY;
      // 移动端适配

      if (Util$1.deviceType() == 'desktop') {
        var x = e.pageX || e.clientX + scrollX;
        var y = e.pageY || e.clientY + scrollY;
      } else {
        var x = e.changedTouches[0].pageX || e.changedTouches[0].clientX + scrollX;
        var y = e.changedTouches[0].pageY || e.changedTouches[0].clientY + scrollY;
      }

      elePostion.click_x = x;
      elePostion.click_y = y;
      elePostion.ele = e.target || e.srcElement; // console.log(elePostion.ele,event, x,y, elePostion.ele.offsetLeft,elePostion.ele.offsetTop ,offset(elePostion.ele,'left'),offset(elePostion.ele,'top'))
      // console.log('---x-->',x, elePostion.ele.offsetLeft,offset(elePostion.ele,'left'))
      // console.log('---y-->',y, elePostion.ele.offsetTop,offset(elePostion.ele,'top'))

      elePostion.elementX = x - offset(elePostion.ele, 'left');
      elePostion.elementY = y - offset(elePostion.ele, 'top');

      if (!x || !y || x <= 0 || y <= 0) {
        return;
      }

      if (!AnalysysAgent || !AnalysysAgent.freeApi) {
        setTimeout(function () {
          addClickEvent(event);
        }, 100);
      } else {
        AnalysysAgent.freeApi('$web_click');
      }
    }

    function initHeatmap() {
      if (Util$1.deviceType() == 'desktop') {
        Util$1.addEvent(document, 'click', addClickEvent);
      } else {
        Util$1.addEvent(document, 'touchstart', addClickEvent);
      }
    }

    function heatmapInit(config) {
      heatmapConfig = config;

      if (config.autoHeatmap === true) {
        if (window.location.href.indexOf("arkheatmap=true") > -1) {
          loadHeatmapSDK();
        } else {
          initHeatmap();
        }
      }

      return config;
    }

    var lifecycle$3 = {
      AnalysysAgent: {
        init: heatmapInit
      }
    };



    var heatmap = ({
        __proto__: null,
        fieldRules: fieldRules$3,
        fieldTemplate: fieldTemplate$3,
        lifecycle: lifecycle$3
    });

    /**
     * 字段填充、字段校验规则模板
     * 
     * check：数据合法检测方法列表，每个方法返回bool值，以用户为准，同名覆盖
     * 
     */
    var fieldRules$4 = {
      xcontext: {
        $user_agent: {
          valueType: 1,
          value: encodeURIComponent(window.navigator.userAgent)
        }
      }
    };

    /**
     * SDK 基础字段定义表
     * base.outer：上报日志基础结构定义
     * base.xcontext:上报报文找中xcontext下的共有字段定义
     * $开头的字段为各个事件特殊拥有字段
     */
    var temp = {};
    var event = ['$startup', '$track', '$pageview', '$webstay', '$web_click', '$errorLog'];
    var common = {
      // "base": {
      xcontext: ["$user_agent"] // }

    };

    for (var i = 0; i < event.length; i++) {
      temp[event[i]] = common;
    }



    var ua = ({
        __proto__: null,
        fieldRules: fieldRules$4,
        fieldTemplate: temp
    });

    /**
     * 字段填充、字段校验规则模板
     * 
     * check：数据合法检测方法列表，每个方法返回bool值，以用户为准，同名覆盖
     * 
     */
    var fieldRules$5 = {};

    /**
     * SDK 基础字段定义表
     * base.outer：上报日志基础结构定义
     * base.xcontext:上报报文找中xcontext下的共有字段定义
     * $开头的字段为各个事件特殊拥有字段
     */
    var fieldTemplate$4 = {};

    var hybridAns = {
      //设置TRACKID
      identify: function identify(distinctId) {
        var paramArray = backParamsArray(distinctId);
        transporter("identify", paramArray);
      },
      //设置及关联LOGINID TRACKID
      alias: function alias(aliasId, originalId) {
        var paramArray = backParamsArray(aliasId, originalId);
        transporter("alias", paramArray);
      },
      //清除所有ID 超级属性 profile设置
      reset: function reset() {
        transporter("reset", []);
      },
      //自定义事件
      track: function track(eventName, eventInfo) {
        var paramArray = backParamsArray(eventName, eventInfo);
        transporter("track", paramArray);
      },
      // 设置用户属性
      profileSet: function profileSet(propertyName, propertyValue) {
        var paramArray = backParamsArray(propertyName, propertyValue);
        transporter("profileSet", paramArray);
      },
      //设置用户超级属性
      profileSetOnce: function profileSetOnce(propertyName, propertyValue) {
        var paramArray = backParamsArray(propertyName, propertyValue);
        transporter("profileSetOnce", paramArray);
      },
      //设置用户超级属性自增
      profileIncrement: function profileIncrement(propertyName, propertyValue) {
        var paramArray = backParamsArray(propertyName, propertyValue);
        transporter("profileIncrement", paramArray);
      },
      //增加用户超级属性
      profileAppend: function profileAppend(propertyName, propertyValue) {
        var paramArray = backParamsArray(propertyName, propertyValue);
        transporter("profileAppend", paramArray);
      },
      //删除单个用户超级属性
      profileUnset: function profileUnset(property) {
        var paramArray = backParamsArray(property);
        transporter("profileUnset", paramArray);
      },
      //删除所有用户超级属性
      profileDelete: function profileDelete() {
        transporter("profileDelete", []);
      },
      //设置超级属性
      registerSuperProperty: function registerSuperProperty(superPropertyName, superPropertyValue) {
        var paramArray = backParamsArray(superPropertyName, superPropertyValue);
        transporter("registerSuperProperty", paramArray);
      },
      //
      registerSuperProperties: function registerSuperProperties(superPropertyName, superProperies) {
        var paramArray = backParamsArray(superPropertyName, superProperies);
        transporter("registerSuperProperties", paramArray);
      },
      //删除超级属性
      unRegisterSuperProperty: function unRegisterSuperProperty(superPropertyName) {
        var paramArray = backParamsArray(superPropertyName);
        transporter("unRegisterSuperProperty", paramArray);
      },
      //清除超级属性
      clearSuperProperties: function clearSuperProperties() {
        transporter("clearSuperProperties", []);
      },
      // 获取单个超级属性
      getSuperProperty: function getSuperProperty(superPropertyName, callbackFun) {
        var paramArray = backParamsArray(superPropertyName);
        transporter("getSuperProperty", paramArray, callbackFun.name);
      },
      // 获取超级属性
      getSuperProperties: function getSuperProperties(callbackFun) {
        transporter("getSuperProperties", [], callbackFun.name);
      },
      //页面初始化
      pageView: function pageView(pageName, pageInfo) {
        if (pageInfo) {
          pageInfo.$url = location.href;
          pageInfo.$title = document.title;
        } else {
          pageInfo = {
            $url: location.href,
            $title: document.title
          };
        }

        var paramArray = backParamsArray(pageName, pageInfo);
        transporter("pageView", paramArray);
      },
      getDistinctId: function getDistinctId(callbackFun) {
        transporter("getDistinctId", [], callbackFun.name);
      }
    };

    function loadIframeUrl(url) {
      var iframe = document.createElement("iframe");
      iframe.setAttribute("src", url);
      iframe.setAttribute("id", "AnalysysAgentIframe");
      iframe.setAttribute("style", "display:none;");

      if (!document.body) {
        setTimeout(function () {
          loadIframeUrl(url);
        }, 200);
        return;
      }

      document.body.appendChild(iframe);
      iframe.parentNode.removeChild(iframe);
    }

    function transporter(funName, paramArray, callbackFunName) {
      var params = {
        functionName: funName,
        functionParams: paramArray
      };

      if (callbackFunName !== undefined) {
        params.callbackFunName = callbackFunName;
      }

      var url = "analysysagent:" + JSON.stringify(params);
      loadIframeUrl(url);
    }

    function backParamsArray() {
      var arg = arguments;
      var argArray = [];

      for (var i = 0; i < arg.length; i++) {
        if (arg[i] !== undefined) {
          argArray.push(arg[i]);
        }
      }

      return argArray;
    }

    function initHybrid() {
      var initObj = window.AnalysysAgent;
      var auto = true;
      var pageProperty = null;

      for (var i = 0; i < initObj.length; i++) {
        if (initObj[i][0] === 'auto' && initObj[i][1] === false) {
          auto = false;
        }

        if (initObj[i][0] === 'pageProperty' && Util$1.paramType(initObj[i][1]) === 'Object') {
          pageProperty = initObj[i][1];
        }

        if (Util$1.paramType(hybridAns[initObj[i][0]]) === 'Function') {
          hybridAns[initObj[i][0]](initObj[i][1], initObj[i][2]);
          continue;
        }
      }

      if (auto === false) return;

      if (pageProperty) {
        pageProperty.$url = location.href;
        pageProperty.$title = document.title;
      } else {
        pageProperty = {
          $url: pageHash,
          $title: document.title
        };
      }

      var paramArray = backParamsArray('', pageProperty);
      transporter("pageView", paramArray);
      checkHash();
    }

    var pageHash = location.href;

    function hashView() {
      if (pageHash === location.href) return;
      pageHash = location.href;
      var pageProperty = {
        $url: pageHash,
        $title: document.title
      };
      var paramArray = backParamsArray('', pageProperty);
      transporter("pageView", paramArray);
    }

    function checkHash() {
      Util$1.changeHash(function () {
        hashView();
      });
    }

    var lifecycle$4 = {
      AnalysysAgent: {
        hybrid: initHybrid,
        hybridAns: hybridAns
      }
    };



    var hybrid = ({
        __proto__: null,
        fieldRules: fieldRules$5,
        fieldTemplate: fieldTemplate$4,
        lifecycle: lifecycle$4
    });

    /**
     * 字段填充、字段校验规则模板
     * 
     * check：数据合法检测方法列表，每个方法返回bool值，以用户为准，同名覆盖
     * 
     */
    var fieldRules$6 = {
      NPSConfigURL: {
        check: {
          value: ["isUrl"]
        }
      }
    };

    /**
     * SDK 基础字段定义表
     * base.outer：上报日志基础结构定义
     * base.xcontext:上报报文找中xcontext下的共有字段定义
     * $开头的字段为各个事件特殊拥有字段
     */
    var fieldTemplate$5 = {};

    var npsConfig = {};

    function loadVisitorSDK$1() {
      Util$1.addScript('AnalysysAgent_JS_SDK_NPS');
    }

    function initNPS(config) {
      if (config.NPSConfigURL && Util$1.GetUrlParam("arkheatmap") != true && Util$1.GetUrlParam("visual") != true) {
        if (config.NPSConfigURL.charAt(config.NPSConfigURL.length - 1) !== "/") {
          config.NPSConfigURL += '/';
        }

        config.NPSConfigURL = config.NPSConfigURL + 'nps';
        npsConfig = config;
        npsConfig.eventList = [];
        window.AnalysysAgentNPS = npsConfig;
        loadVisitorSDK$1();
      }

      return config;
    }

    function saveNPSEvent(option) {
      if (!npsConfig.NPSConfigURL || Util$1.GetUrlParam("arkheatmap") == true || Util$1.GetUrlParam("visual") == true) {
        return option;
      }

      var dataArray = JSON.parse(option.data);

      for (var i = 0; i < dataArray.length; i++) {
        var type = dataArray[i].xwhat;

        if (window.AnalysysAgentNPS && window.AnalysysAgentNPS.nps) {
          window.AnalysysAgentNPS.nps(type);
        } else {
          window.AnalysysAgentNPS.eventList.push(type);
        }
      }

      return option;
    }

    var lifecycle$5 = {
      AnalysysAgent: {
        init: initNPS
      },
      upload: {
        init: saveNPSEvent
      }
    };



    var nps = ({
        __proto__: null,
        fieldRules: fieldRules$6,
        fieldTemplate: fieldTemplate$5,
        lifecycle: lifecycle$5
    });

    /**
     * 合并定制模块
     *
     * base:基础模块
     * encrypt:数据加密模块
     * visitor:可视化模块
     * webstay:深度线采集模块
     * zh:招行模块
     * heatmap:热图采集及展示模块
     * device:设备信息模块
     * ua:上报ua模块
     * errorLog:校验失败上报$errorLog模块
     */
    // var plugList = [encrypt, visitor, webstay, heatmap, device, errorLog] //热图
    // var plugList = [encrypt, visitor, webstay, heatmap, ua] //上传UA SDK不做解析
    // var plugList = [encrypt, visitor, webstay,device] //通用
    // var plugList = [] //开源
    // var plugList = [visitor, webstay, heatmap, ua, hybrid] //热图

    var plugList = [visitor, webstay, heatmap, ua, nps, hybrid];
    /**
     * 合并定制化模板 根据输入模板列表不同集合出不同的定制化模板
     */

    var fieldRules$7 = fieldRules || {};
    var fieldTemplate$6 = fieldTemplate || {};
    var lifecycle$6 = lifecycle || {};

    for (var i$1 = 0; i$1 < plugList.length; i$1++) {
      if (plugList[i$1].fieldRules) {
        fieldRules$7 = Util$1.objMerge(fieldRules$7, plugList[i$1].fieldRules);
      }

      if (plugList[i$1].fieldTemplate) {
        fieldTemplate$6 = Util$1.objMerge(fieldTemplate$6, plugList[i$1].fieldTemplate);
      }

      if (plugList[i$1].lifecycle) {
        lifecycle$6 = Util$1.fnMerge(lifecycle$6, plugList[i$1].lifecycle);
      }
    }

    /**
     * 生产事件日志模板
     * commonTemp 为公用事件模板，用于自定义事件日志
     */
    var eventTemp = {};
    var commonTemp = {};
    var baseTemp = fieldTemplate$6.base;
    var outerTemp = baseTemp.outer;

    for (var i$2 = 0; i$2 < outerTemp.length; i$2++) {
      if (baseTemp[outerTemp[i$2]]) {
        commonTemp[outerTemp[i$2]] = Util$1.toObj(baseTemp[outerTemp[i$2]]);
      } else {
        commonTemp[outerTemp[i$2]] = '';
      }
    }

    for (var key in fieldTemplate$6) {
      if (key != 'base') {
        eventTemp[key] = Util$1.objMerge(commonTemp, Util$1.toDeepObj(fieldTemplate$6[key]));
      }
    }

    eventTemp.commonTemp = commonTemp;

    function temp$1(eventName) {
      return eventTemp[eventName] || eventTemp.commonTemp;
    }

    var errorMessage = {
      common: '{FN}:Property key invalid, nonsupport value: $lib/$lib_version/$platform/$first_visit_time/$debug/$is_login \n' + 'current KEY:{KEY}',
      60001: '{FN}:Property key invalid, support type: String \n' + 'current key:{KEY}\n',
      60002: '{FN}:Property value invalid of key[{KEY}], support type: Number \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      60003: '{FN}:Property value invalid of key[{KEY}], support type: Boolean \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      60004: '{FN}:Property value invalid of key[{KEY}], support type: Array \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      60005: '{FN}:The length of the property[{KEY}] value (string[{VALUE}]) needs to be 1-255 !',
      60006: 'Please set appkey first.',
      60007: 'Please set uploadURL first.',
      60008: 'Send message failed.',
      60009: '{FN}:The length of the property key (string[{KEY}]) needs to be 1-125 !',
      600010: '{FN}:The length of the property key (string[{KEY}]) needs to be 1-99 !',
      600011: '{FN}:[{KEY}] does not conform to naming rules!',
      600012: '{FN}:Property key invalid, nonsupport value: $lib/$lib_version/$platform/$first_visit_time/$debug/$is_login \n' + 'current KEY:{KEY}',
      600013: '{FN}:Property value invalid of key[{KEY}], support type: Array with String as its internal element \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      600016: '{FN}:Property value invalid of key[{KEY}], support type: Object \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      600017: '{FN}:The length of the property key (string[{KEY}]) needs to be 1-255 !',
      600018: '{FN}:Property value invalid of key[{KEY}] invalid, support type: String \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
      600019: '{FN}:The length of the property[{KEY}] value (string[{VALUE}]) needs to be 1-255 !',
      600020: '{FN}:Property value invalid of key[{KEY}], support type: Boolean/Array/String/Number \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}'
    };
    var successMessage = {
      common: '',
      20001: 'Send message success',
      20002: '{FN}: set success ({VALUE})',
      20003: '{FN}:({VALUE}) delete success',
      20004: '{FN}:clear success',
      20005: '{FN}:reset success',
      20006: 'set appkey success. current appkey : {VALUE}',
      20007: 'Init Analysys JS sdk success, version : {VALUE}',
      20008: 'set uploadURL success. current uploadURL : {VALUE}',
      20009: '{FN}:[{KEY}] : get failed',
      20010: '{FN}:[{KEY}] : get success. ({VALUE})',
      20011: '{FN}:({VALUE}) delete failed'
    };

    function successLog(msg) {
      if (baseConfig.base.$debug === 1 || baseConfig.base.$debug === 2) {
        var status = baseConfig.status;
        var successCode = status.successCode;
        var fn = status.FnName;
        var key = status.key;
        var value = status.value;
        var msgTemp = successMessage[successCode] || successMessage.common;
        var showMsg = msgTemp.replace(/{FN}/, fn).replace(/{KEY}/g, key).replace(/{VALUE}/g, value);

        if (msg) {
          showMsg = msg;
        }

        if (!showMsg) return;

        if (Util$1.paramType(console) === 'Object' && console.log) {
          try {
            return console.log.apply(console, showMsg);
          } catch (e) {
            console.log(showMsg);
          }
        }
      }
    }

    function errorLog() {
      var status = baseConfig.status;
      var errorCode = status.errorCode;
      var fn = status.FnName;
      var key = status.key;
      var value = status.value;

      if (Util$1.paramType(value) == 'Object') {
        value = JSON.stringify(value);
      }

      var valueType = Util$1.paramType(value);

      if (errorCode === '600018' && !key) {
        errorCode = '600011';
      }

      if (errorCode === '60005' && !key) {
        errorCode = '600017';
      }

      if ((errorCode === '600017' || errorCode === '600019' || errorCode === '60009' || errorCode === '600010' || errorCode === '60005') && value.length && value.length > 30) {
        value = Util$1.stringSlice(value, 30) + '...';
      }

      if (key && key.length > 30) {
        key = Util$1.stringSlice(key, 30) + '...';
      }

      if (fn && fn.length > 30) {
        fn = Util$1.stringSlice(fn, 30) + '...';
      }

      var msgTemp = errorMessage[errorCode] || errorMessage.common;
      var showMsg = msgTemp.replace(/{FN}/g, fn).replace(/{KEY}/g, key).replace(/{VALUE}/g, value).replace(/{VALUETYPE}/g, valueType);

      if (baseConfig.base.$debug === 1 || baseConfig.base.$debug === 2) {
        console.warn(showMsg);
      }

      if (lifecycle$6.errorLog && lifecycle$6.errorLog.init && errorCode !== '60008') {
        var FnName = baseConfig.status.FnName;
        lifecycle$6.errorLog.init(showMsg);
        baseConfig.status.FnName = FnName;
      }
    }

    var checkField = function checkField() {};

    checkField.prototype = Util$1;

    checkField.prototype.isString = function (val) {
      baseConfig.status.errorCode = "60001";
      return Util$1.paramType(val) === 'String';
    };

    checkField.prototype.isNumber = function (val) {
      baseConfig.status.errorCode = "60002";
      return Util$1.paramType(val) === 'Number';
    };

    checkField.prototype.isBoolean = function (val) {
      baseConfig.status.errorCode = "60003";
      return Util$1.paramType(val) === 'Boolean';
    };

    checkField.prototype.isObject = function (val) {
      return this.paramType(val) === 'Object';
    };

    checkField.prototype.lengthRule = function (val, min, max) {
      if (!this.isNumber(max)) {
        max = Infinity;
      }

      var status = true;

      if (!(this.isNumber(min) && val.length && val.length > min && val.length < max + 1)) {
        baseConfig.status.errorCode = "60005";
        status = false;
      }

      return status;
    };

    checkField.prototype.nimLength = function (val) {
      return this.lengthRule(val, 0);
    };

    checkField.prototype.length99 = function (val) {
      var lengthStatus = this.lengthRule(val, 0, 99);

      if (!lengthStatus) {
        baseConfig.status.errorCode = "600010";
      }

      return lengthStatus;
    };

    checkField.prototype.length125 = function (val) {
      var lengthStatus = this.lengthRule(val, 0, 125);

      if (!lengthStatus) {
        baseConfig.status.errorCode = "60009";
      }

      return lengthStatus;
    };

    checkField.prototype.length255 = function (val) {
      if (!val && !this.isString(val) && !this.isNumber(val) && !this.isBoolean(val)) {
        baseConfig.status.errorCode = "60005";
        return false;
      }

      if (this.paramType(val) !== 'String') {
        val = val.toString();
      }

      var lengthStatus = this.lengthRule(val, 0, 255);

      if (!lengthStatus) {
        baseConfig.status.errorCode = "600019";
      }

      return lengthStatus;
    };

    checkField.prototype.keyLength255 = function (val) {
      var lengthStatus = this.length255(val);

      if (!lengthStatus) {
        baseConfig.status.errorCode = "600017";
      }

      return lengthStatus;
    };

    checkField.prototype.isUrl = function (URL) {
      var str = URL; //判断URL地址的正则表达式为:http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)?
      //下面的代码中应用了转义字符"\"输出一个字符"/"

      var Expression = /http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w- .\/?%&=]*)?/;
      var objExp = new RegExp(Expression);

      if (objExp.test(str) == true) {
        return true;
      } else {
        baseConfig.status.errorCode = "60006";
        return false;
      }
    };

    checkField.prototype.isDebug = function (val) {
      if (this.isNumber(val) && (val === 0 || val === 1 || val === 2)) {
        return true;
      }

      return false;
    };

    checkField.prototype.notObject = function (val) {
      var status = !this.isObject(val);

      if (!status) {
        baseConfig.status.errorCode = "600020";
      }

      return status;
    };

    checkField.prototype.notSpecialCharacters = function (val) {
      var patrn = new RegExp("[\\u4E00-\\u9FA5]|[\\uFE30-\\uFFA0]", "gi");
      var reg = /^[$a-zA-Z][a-zA-Z0-9_$]{0,}$/;

      if (patrn.test(val) || !reg.test(val)) {
        baseConfig.status.errorCode = "600011";
        return false;
      }

      return true;
    };

    checkField.prototype.isArrayString = function (val) {
      if (this.paramType(val) === 'Array') {
        for (var i = 0; i < val.length; i++) {
          if (this.paramType(val[i]) !== 'String') {
            baseConfig.status.errorCode = "600013";
            return false;
          }

          if (!this.length255(val[i])) {
            if (val[i] && val[i].length > 500) {
              val[i] = Util$1.stringSlice(val[i], 499) + '$';
            }

            baseConfig.status.value = val[i];
            return false;
          }
        }
      }

      return true;
    };

    checkField.prototype.keywords = function (val) {
      var key = baseConfig.keywords;

      if (key.indexOf(val) > -1) {
        baseConfig.status.errorCode = "600012";
        return false;
      }

      return true;
    };

    var checkRule = new checkField();

    function check(value, checkList) {
      for (var i = 0; i < checkList.length; i++) {
        var checkStatus = checkRule[checkList[i]](value);

        if (!checkStatus) {
          return false;
        }
      }

      return true;
    }

    function checkFields(key, value, rule) {
      var checkRule = rule.check;
      var status = true;

      if (!checkRule) {
        return status;
      }

      var checkKey = checkRule.key;
      var checkValue = checkRule.value;

      if (!checkValue) {
        checkValue = fieldRules$7.xcontextCommonRule.value;
      }

      if (checkKey) {
        baseConfig.status.code = 200;
        status = check(key, checkKey);
        baseConfig.status.key = key;

        if (!status) {
          baseConfig.status.code = 400;
          errorLog();
        }
      }

      if (checkValue) {
        baseConfig.status.code = 200;
        status = check(value, checkValue);

        if (Util$1.paramType(value) !== 'Array') {
          baseConfig.status.value = value;
        }

        if (!status) {
          baseConfig.status.code = 400;
          errorLog();
        }
      } // if (status && checkRule.successCode) {
      //     baseConfig.status.successCode = checkRule.successCode
      // }


      return status;
    }

    function resetCode() {
      baseConfig.status = {
        code: 200,
        FnName: baseConfig.status.FnName || "",
        key: "",
        value: "",
        errorCode: "",
        successCode: ""
      };
    }

    function fillField(feilds, rules) {
      var rulesList = rules || fieldRules$7;
      var obj = {};

      for (var key in feilds) {
        var feild = feilds[key];
        var rule = rulesList[key]; // console.log(key,'======',feilds[key],'======',rule)

        if (!rule) {
          continue;
        }

        var feildValue = '';

        if (Util$1.paramType(feild) === 'Object') {
          var content = fillField(feild, rule);
          obj[key] = content;
        } else {
          if (Util$1.objHasKay(rule, 'valueType')) {
            if (rule.valueType === 0) {
              feildValue = rule.value(); // // console.log(key,'feildValue===>',feildValue)
              // if (checkFields(key, feildValue, rule)) {
              //     obj[key] = feildValue
              // } else {
              //     if (baseConfig.status.errorCode === '600019') {

              if (feildValue && feildValue.length > 500) {
                obj[key] = Util$1.stringSlice(feildValue, 499) + '$';
              } else {
                obj[key] = feildValue;
              } //     }
              // }

            }

            if (rule.valueType === 1) {
              feildValue = rule.value; // if (checkFields(key, feildValue, rule)) {
              //     obj[key] = feildValue
              // } else {
              //     if (baseConfig.status.errorCode === '600019') {

              if (feildValue && feildValue.length > 500) {
                obj[key] = Util$1.stringSlice(feildValue, 499) + '$';
              } else {
                obj[key] = feildValue;
              } // }
              // }

            }
          }
        }
      }

      return obj;
    }
    /**
     * [reset description]检测是否重置初始化状态
     * @return {[type]} [description] true：需初始化 false：无需初始化
     */


    function clearCache(resetStatus) {
      resetStatus = resetStatus || false;

      if (!resetStatus) {
        var config = baseConfig.base;

        for (var key in config) {
          if (Util$1.paramType(config[key]) !== 'Object') {
            if (key === '$debug' || key === 'appid' || key === 'uploadURL') {
              var keyStorage = Storage$1.getLocal('ANS' + key.toUpperCase());

              if (keyStorage !== config[key]) {
                resetStatus = true;
              }

              if (resetStatus) {
                Storage$1.setLocal('ANS' + key.toUpperCase(), config[key]);
              }
            }
          }
        }
      }

      if (resetStatus) {
        removeAliasId();
        removeIdentifyId();
        Storage$1.removeLocal('ARKSUPER');
        Storage$1.removeSession('STARTUP');
        Storage$1.setLocal("FRISTDAY", Util$1.format(new Date(), 'yyyyMMdd'));
        Storage$1.setLocal("FRISTIME", true);
        Storage$1.removeLocal("POSTDATA");
        Storage$1.removeLocal("ANSSERVERTIME");
        Storage$1.removeLocal("ARKFRISTPROFILE");
      }

      return resetStatus;
    }
    /**
     * [isStartUp description]检测启动状态
     * @return {Boolean} [description] true：已启动，false：未启动
     */


    function isStartUp() {
      var startUpStatus = Storage$1.getSession('STARTUP') || false;

      if (startUpStatus === false) {
        Storage$1.setSession('STARTUP', true);
        Storage$1.setSession('STARTUPTIME', Util$1.format(new Date(), 'yyyy-MM-dd hh:mm:ss.SSS'));
        sessionId$1.setId();
      }

      return startUpStatus;
    }

    function checkBase() {
      for (var key in baseConfig.base) {
        resetCode(); // baseConfig.status.FnName = 'AnalysysAgentInit'

        baseConfig.status.key = key;
        var rule = fieldRules$7[key];

        if (key === '$debug') {
          rule = fieldRules$7.xcontext[key];
        }

        if (key === '$lib_version') {
          rule = fieldRules$7.xcontext[key];
        }

        var checkValue = rule;

        if (checkValue && !checkFields(key, baseConfig.base[key], checkValue)) {
          baseConfig.base[key] = '';
          return false;
        }

        successLog();
      }

      return true;
    }

    function checkPrivate(obj, ruleName, isKey) {
      resetCode();
      var rule = fieldRules$7[ruleName] || fieldRules$7.xcontextCommonRule;

      if (Util$1.paramType(obj) !== 'Object' || isKey == true) {
        var checkKey = rule.check.key;
        var status = check(Util$1.trim(obj), checkKey);
        baseConfig.status.key = obj;

        if (!status) {
          errorLog();
          return false;
        }
      } else {
        for (var key in obj) {
          var status = checkFields(key, obj[key], rule);

          if (!status) {
            if (baseConfig.status.errorCode === '600019') {
              if (obj[key] && obj[key].length > 500) {
                obj[key] = Util$1.stringSlice(obj[key], 499) + '$';
              }
            }
          }
        }
      }

      return true;
    }

    var postStatus = true;
    var send_type = 'img';
    var rx_dangerous = /[\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

    function delRx(list) {
      if (Util$1.paramType(list) === 'Array') {
        for (var i = 0; i < list.length; i++) {
          list[i] = delRx(list[i]);
        }
      }

      if (Util$1.paramType(list) === 'Object') {
        for (var key in list) {
          var value = list[key];
          list[key] = delRx(value);
        }
      }

      if (Util$1.paramType(list) === 'String') {
        list = list.replace(rx_dangerous, function (a) {
          return "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
        });
      }

      return list;
    }

    function sendPost(data, storageStatus) {
      if (send_type !== 'img' && storageStatus !== 'NOT_STORAGE') {
        postStatus = false;
      }

      var msg = data;

      if (Util$1.paramType(data) === 'Array') {
        data = delRx(data);
        msg = JSON.stringify(data);
      } //发送日志发送失败，进入缓存序列


      var error = function error(msg) {
        postStatus = true;
        baseConfig.status.errorCode = '60008';
        errorLog();
      }; //发送成功后，将缓存序列对应数据去除


      var successCheckPost = function successCheckPost(data, storageStatus) {
        postStatus = true;
        var postDataList = Storage$1.getLocal("POSTDATA") || [];

        if (Util$1.isEmptyObject(postDataList)) {
          postDataList = [];
          Storage$1.removeLocal("POSTDATA");
        }

        if (postDataList.length === 0) {
          Storage$1.removeLocal("POSTDATA");
          return;
        }

        var saveData = [];

        for (var i = 0; i < postDataList.length; i++) {
          var delData = false;

          for (var y = 0; y < data.length; y++) {
            if (data[y].xwhen === postDataList[i].xwhen || !data[y].xwhen || !postDataList[i].xwhen) {
              delData = true;
            }
          }

          if (delData === false && Util$1.paramType(postDataList[i]) === 'Object' && !Util$1.isEmptyObject(postDataList[i])) {
            saveData.push(postDataList[i]);
          }
        }

        postDataList = null;

        if (saveData.length > 0 && storageStatus !== 'NOT_STORAGE' && send_type !== 'img') {
          Storage$1.setLocal("POSTDATA", saveData);
          sendPost(saveData);
        } else {
          Storage$1.removeLocal("POSTDATA");
        }
      }; //发送成功执行


      var success = function (data) {
        return function (msg) {
          if (msg.code == 200 || msg.code == 400 || msg.code == 4200) {
            baseConfig.status.successCode = '20001';
            successLog();
            successCheckPost(data, storageStatus);
          } else {
            error();
          }
        };
      }(data);

      var url = baseConfig.base.uploadURL + 'up?appid=' + baseConfig.base.appid;
      var postMsg = {
        url: url,
        data: msg,
        success: success,
        error: error
      };
      successLog('Send message to server: ' + baseConfig.base.uploadURL + 'up?appid=' + baseConfig.base.appid + '\ndata:' + msg);

      if (lifecycle$6.upload && lifecycle$6.upload.init) {
        postMsg = lifecycle$6.upload.init(postMsg);
      }

      if (send_type == 'get') {
        snedGet(postMsg);
        return;
      }

      if (send_type == 'img') {
        snedGet(postMsg, 'img');
        return;
      }

      if (send_type == 'post') {
        new ajax().post(postMsg);
        return;
      }

      if (send_type == 'send') {
        snedGet(postMsg, 'send');
        return;
      }

      new ajax().post(postMsg);
    }

    function setValidKey(option) {
      var data = {
        data: Util$1.encode(option.data),
        send_type: ''
      };
      var param = [];

      for (var key in data) {
        param.push(key + '=' + encodeURIComponent(data[key]));
      }

      var validurl = option.url.indexOf('?') > -1 ? option.url + '&' + param.join('&') : option.url + '?' + param.join('&');
      validurl = validurl.replace(baseConfig.base.uploadURL, "/");
      var validValue = Util$1.MD5(validurl, 32).split("");
      var validkey = validValue[2] + '' + validValue[0] + '' + validValue[4];
      return validkey;
    }

    function snedGet(option, type) {
      if (type == 'send' && navigator.sendBeacon) {
        var sendStatus = navigator.sendBeacon(option.url, option.data);

        if (sendStatus) {
          option.success({
            code: 200
          });
        }

        return;
      }

      if (type == 'send' && !navigator.sendBeacon) {
        type = 'img';
      }

      var validkey = setValidKey(option);
      option.data = {
        data: Util$1.encode(option.data),
        send_type: validkey
      };

      if (type == 'img') {
        var param = [];

        for (var key in option.data) {
          param.push(key + '=' + encodeURIComponent(option.data[key]));
        }

        var url = option.url.indexOf('?') > -1 ? option.url + '&' + param.join('&') : option.url + '?' + param.join('&');
        var dom = document;
        var createImg = dom.createElement('img'); // var callbackTimer = null

        createImg.src = url;
        createImg.width = 1;
        createImg.height = 1;

        createImg.onload = function (e) {
          // clearTimeout(callbackTimer)
          // callbackTimer = null;
          this.src = '';
          this.onload = null, this.onerror = null, this.onabort = null; // option.success({ code: 200 })
        };

        createImg.onerror = function (e) {
          // clearTimeout(callbackTimer)
          // callbackTimer = null;
          this.src = '';
          this.onload = null, this.onerror = null, this.onabort = null; // option.success({ code: 200 })
        };

        createImg.onabort = function (e) {
          // clearTimeout(callbackTimer)
          // callbackTimer = null;
          this.src = '';
          this.onload = null, this.onerror = null, this.onabort = null; // option.success({ code: 200 })
        }; // callbackTimer = setTimeout(function() {
        // createImg.src = ''
        // createImg.onload = null, createImg.onerror = null, createImg.onabort = null


        option.success({
          code: 200
        }); // }, 600)
      }

      if (type == 'get') {
        new ajax().get(option);
      }
    }

    function checkLogBaseJson(obj) {
      if (Util$1.paramType(obj) === 'Object' && !Util$1.isEmptyObject(obj)) {
        var status = true;

        for (var i = 0; i < baseConfig.baseJson.length; i++) {
          var key = baseConfig.baseJson[i];

          if (key === 'xwhat') {
            continue;
          }

          if (!obj[key] || Util$1.paramType(obj[key]) == 'Object' && Util$1.isEmptyObject(obj[key])) {
            status = false;
          }
        }

        return status;
      }

      return false;
    }

    function checkSavaData(list) {
      var dataList = [];

      if (Util$1.paramType(list) === 'Array' && list.length > 0) {
        for (var i = 0; i < list.length; i++) {
          var itemList = checkSavaData(list[i]);

          if (itemList.length > 0) {
            dataList.push.apply(dataList, itemList);
          }
        }
      }

      if (Util$1.paramType(list) === 'Object' && !Util$1.isEmptyObject(list) && checkLogBaseJson(list)) {
        dataList.push(list);
      }

      return dataList;
    }

    function upLog(log, storageStatus) {
      if (baseConfig.base.sendType) {
        send_type = baseConfig.base.sendType;
      }

      var upData = [];

      if (storageStatus == 'NOT_STORAGE' || send_type == 'img') {
        upData = checkSavaData(log);
      } else {
        var postDataList = Storage$1.getLocal("POSTDATA") || [];
        postDataList = checkSavaData(postDataList);

        if (postDataList.length == 0) {
          Storage$1.removeLocal("POSTDATA");
        } else {
          upData = postDataList;
        }

        upData = postDataList;

        if (postDataList.length < 500) {
          upData.push.apply(upData, checkSavaData(log));
        } else {
          upData = checkSavaData(log);
        }

        Storage$1.setLocal("POSTDATA", upData);
      }

      if (postStatus === false && send_type !== 'img' && storageStatus !== 'NOT_STORAGE') return;

      if (upData.length > 0) {
        if (send_type === 'img') {
          for (var i = 0; i < upData.length; i++) {
            sendPost([upData[i]]);
          }
        } else {
          sendPost(upData, storageStatus);
        }
      }
    }

    function pageView(pageName, obj) {
      baseConfig.status.FnName = '$pageview';
      resetCode();
      var nameObj = {
        $pagename: ''
      };

      if (arguments.length > 0) {
        nameObj = {
          $pagename: pageName
        };
        checkPrivate(nameObj);
      } // if (!status) {
      //     return
      // }


      if (obj) {
        //检测distinctId
        var status = checkPrivate(obj);
      }

      obj = {
        xcontext: obj || {}
      };
      var arkSuper = Storage$1.getLocal('ARKSUPER') || {};
      obj = Util$1.objMerge({
        xcontext: arkSuper
      }, obj);
      obj = Util$1.objMerge({
        xcontext: nameObj
      }, obj);
      var pageViewTemp = temp$1('$pageview');
      var pageViewObj = Util$1.delEmpty(fillField(pageViewTemp));
      var pageViewLog = Util$1.objMerge(pageViewObj, obj); //如字段中有不合法内容则打印错误日志
      // if (!pageViewLog) {
      //     errorLog()
      //     return
      // }
      //去除空数据后上传数据

      upLog(pageViewLog);
    }

    var pageUrl = window.location.href;

    function hashPageView() {
      Util$1.changeHash(function () {
        if (pageUrl !== window.location.href) {
          pageUrl = window.location.href;
          pageView();
        }
      }); // if ('onpopstate' in window) {
      //     if (!('onpushState' in window)) {
      //         window.history.pushState = Util.addWindowEvent('pushState');
      //     }
      //     if (!('onreplaceState' in window)) {
      //         window.history.replaceState = Util.addWindowEvent('replaceState');
      //     }
      //     Util.addEvent(window, 'popstate', function() {
      //         pageView()
      //     })
      //     Util.addEvent(window, 'pushState', function() {
      //         pageView()
      //     })
      //     Util.addEvent(window, 'replaceState', function() {
      //         pageView()
      //     })
      //     if (!!window.ActiveXObject || "ActiveXObject" in window) {
      //         if ('onhashchange' in window) {
      //             Util.addEvent(window, 'hashchange', pageView())
      //         }
      //     }
      // } else if ('onhashchange' in window) {
      //     if (document.addEventListener) {
      //         Util.addEvent(window, 'hashchange', function() {
      //             pageView()
      //         })
      //     }
      // }
    }

    function track(eventName, obj) {
      baseConfig.status.FnName = eventName || '$track';
      resetCode();
      var status = checkPrivate(eventName, '$track', true);
      baseConfig.status.FnName = eventName;

      if (obj) {
        checkPrivate(obj);
        obj = {
          xcontext: obj
        };
      }

      var arkSuper = Storage$1.getLocal('ARKSUPER') || {};
      obj = Util$1.objMerge({
        xcontext: arkSuper
      }, obj);
      var trackTemp = temp$1('$track');
      var trackObj = fillField(trackTemp);
      trackObj.xcontext = Util$1.delEmpty(trackObj.xcontext);
      var trackLog = Util$1.objMerge(trackObj, obj); //去除空数据后上传数据

      upLog(trackLog);
    }

    function freeApi(apiName) {
      baseConfig.status.FnName = apiName;
      resetCode();
      var freeApiTemp = temp$1(apiName);

      if (!freeApiTemp) {
        return;
      }

      var freeApiLog = fillField(freeApiTemp);
      var arkSuper = Storage$1.getLocal('ARKSUPER') || {};
      freeApiLog = Util$1.objMerge({
        xcontext: arkSuper
      }, freeApiLog); //如字段中有不合法内容则打印错误日志
      // if (!freeApiLog) {
      //     errorLog()
      //     // return
      // }
      //去除空数据后上传数据

      upLog(Util$1.delEmpty(freeApiLog), 'NOT_STORAGE');
    }

    function getPresetProperties() {
      baseConfig.status.FnName = '$getPresetProperties';
      resetCode(); //检测aliasId

      var getPresetPropertiesTemp = temp$1('$getPresetProperties');
      var getPresetPropertiesLog = fillField(getPresetPropertiesTemp);
      getPresetPropertiesLog.xcontext.$first_visit_time = Storage$1.getLocal('ARKFRISTPROFILE') || '';
      delete getPresetPropertiesLog.xcontext.$is_login;
      return Util$1.delEmpty(getPresetPropertiesLog.xcontext);
    }

    function alias(aliasId, distinctId) {
      baseConfig.status.FnName = '$alias';
      resetCode(); //检测aliasId

      var status = checkPrivate(aliasId, '$alias', true);

      if (!status) {
        return;
      }

      if (distinctId) {
        //检测distinctId
        status = checkPrivate(distinctId, '$alias', true);

        if (status) {
          Storage$1.setLocal('ARK_TRACKID', distinctId);
        }
      }

      Storage$1.setLocal('ARK_LOGINID', aliasId);
      var aliasTemp = temp$1('$alias');
      var aliasLog = fillField(aliasTemp); //去除空数据后上传数据

      upLog(Util$1.delEmpty(aliasLog));

      if (baseConfig.base.autoProfile === true) {
        baseConfig.status.FnName = '$profile_set_once';
        var profileSetOnceTemp = temp$1('$profile_set_once');
        var profileSetOnceObj = fillField(profileSetOnceTemp);
        var time = Util$1.format(new Date(), 'yyyy-MM-dd hh:mm:ss.SSS');
        var obj = {
          $first_visit_time: time,
          $first_visit_language: (navigator.language || navigator.browserLanguage).toLowerCase()
        };
        var profileSetOnceLog = Util$1.objMerge(profileSetOnceObj, {
          xcontext: obj
        }); //去除空数据后上传数据

        upLog(Util$1.delEmpty(profileSetOnceLog));
        Storage$1.setLocal('ARKFRISTPROFILE', time);
      }
    }

    function identify(distinctId, isLogin) {
      baseConfig.status.FnName = '$identify';
      resetCode();
      var status = checkPrivate(distinctId, '$alias', true);

      if (!status) {
        return;
      }

      if (isLogin === true) {
        Storage$1.setLocal('ARK_TRACK_LOGIN', true);
      }

      Storage$1.setLocal('ARK_TRACKID', distinctId);
      baseConfig.status.successCode = "20002";
      baseConfig.status.value = distinctId;
      successLog();
    }

    function profileSet(key, value) {
      baseConfig.status.FnName = '$profile_set';
      resetCode();
      var obj = Util$1.toObj(key, value);
      checkPrivate(obj, '$profile_set');
      var profileSetTemp = temp$1('$profile_set');
      var profileSetObj = Util$1.delEmpty(fillField(profileSetTemp));
      var profileSetLog = Util$1.objMerge(profileSetObj, {
        xcontext: obj
      }); //如字段中有不合法内容则打印错误日志
      // if (!profileSetLog) {
      //     errorLog()
      //     return
      // }
      //去除空数据后上传数据

      upLog(profileSetLog);
    }

    function profileSetOnce(key, value) {
      baseConfig.status.FnName = '$profile_set_once';
      resetCode();
      var obj = Util$1.toObj(key, value);
      checkPrivate(obj, '$profile_set_once');
      var profileSetOnceTemp = temp$1('$profile_set_once');
      var profileSetOnceObj = Util$1.delEmpty(fillField(profileSetOnceTemp));
      var profileSetOnceLog = Util$1.objMerge(profileSetOnceObj, {
        xcontext: obj
      }); //如字段中有不合法内容则打印错误日志
      // if (!profileSetOnceLog) {
      //     errorLog()
      //     return
      // }
      //去除空数据后上传数据

      upLog(profileSetOnceLog);
    }

    function profileIncrement(key, value) {
      baseConfig.status.FnName = '$profile_increment';
      resetCode();
      var obj = Util$1.toObj(key, value);
      checkPrivate(obj, '$profile_increment');
      var profileIncrementTemp = temp$1('$profile_increment');
      var profileIncrementObj = Util$1.delEmpty(fillField(profileIncrementTemp));
      var profileIncrementLog = Util$1.objMerge(profileIncrementObj, {
        xcontext: obj
      }); //如字段中有不合法内容则打印错误日志
      // if (!profileIncrementLog) {
      //     errorLog()
      //     return
      // }
      //去除空数据后上传数据

      upLog(profileIncrementLog);
    }

    function profileAppend(key, value) {
      baseConfig.status.FnName = '$profile_append';
      resetCode();
      var obj = Util$1.toObj(key, value);
      checkPrivate(obj, '$profile_append');
      var profileAppendTemp = temp$1('$profile_append');
      var profileAppendObj = Util$1.delEmpty(fillField(profileAppendTemp));
      var profileAppendLog = Util$1.objMerge(profileAppendObj, {
        xcontext: obj
      }); //如字段中有不合法内容则打印错误日志
      // if (!profileAppendLog) {
      //     errorLog()
      //     return
      // }
      //去除空数据后上传数据

      upLog(profileAppendLog);
    }

    function profileUnset(key) {
      baseConfig.status.FnName = '$profile_unset';
      resetCode();
      var status = checkPrivate(key, '$profile_unset', key);
      var obj = Util$1.toObj(key, '');
      checkPrivate(obj, '$profile_unset');
      var profileUnsetTemp = temp$1('$profile_unset');
      var profileUnsetObj = fillField(profileUnsetTemp);
      var profileUnsetLog = Util$1.objMerge(profileUnsetObj, {
        xcontext: obj
      }); //如字段中有不合法内容则打印错误日志
      // if (!profileUnsetLog) {
      //     errorLog()
      //     return
      // }
      //去除空数据后上传数据

      upLog(profileUnsetLog);
    }

    function profileDelete() {
      baseConfig.status.FnName = '$profile_delete';
      resetCode();
      var profileDeleteTemp = temp$1('$profile_delete');
      var profileDeleteLog = fillField(profileDeleteTemp); //如字段中有不合法内容则打印错误日志
      // if (!profileDeleteLog) {
      //     errorLog()
      //     return
      // }
      //去除空数据后上传数据

      upLog(profileDeleteLog);
    }

    function registerSuperProperty(key, value) {
      baseConfig.status.FnName = '$registerSuperProperty';
      resetCode();
      var obj = Util$1.toObj(key, value);
      checkPrivate(obj, '$registerSuperProperty'); // obj = Util.delEmpty(obj)

      var arkSuper = Storage$1.getLocal('ARKSUPER') || {};
      var saveArkSuper = Util$1.objMerge(arkSuper, obj);
      Storage$1.setLocal('ARKSUPER', saveArkSuper);
      baseConfig.status.successCode = "20002";
      baseConfig.status.value = JSON.stringify(obj);
      successLog();
    }

    function registerSuperProperties(key, value) {
      baseConfig.status.FnName = '$registerSuperProperties';
      resetCode();
      var obj = Util$1.toObj(key, value);
      checkPrivate(obj, '$registerSuperProperties');
      var arkSuper = Storage$1.getLocal('ARKSUPER') || {}; // obj = Util.delEmpty(obj)

      var saveArkSuper = Util$1.objMerge(arkSuper, obj);
      Storage$1.setLocal('ARKSUPER', saveArkSuper);
      baseConfig.status.successCode = "20002";
      baseConfig.status.value = JSON.stringify(obj);
      successLog();
    }

    function getSuperProperty(superPropertyName) {
      baseConfig.status.FnName = '$getSuperProperty';
      resetCode();
      var status = checkPrivate(superPropertyName, '$getSuperProperty', true); // if (!status) {
      //     return
      // }

      var arkSuper = Storage$1.getLocal('ARKSUPER') || {};
      var superProperty = arkSuper[superPropertyName];

      if (!superProperty) {
        baseConfig.status.successCode = '20009';
        baseConfig.status.key = superPropertyName;
        successLog();
        return '';
      }

      baseConfig.status.successCode = "20010";
      baseConfig.status.key = superPropertyName;
      baseConfig.status.value = superProperty;
      successLog();
      return superProperty;
    }

    function getSuperProperties() {
      baseConfig.status.FnName = '$getSuperProperties';
      resetCode();
      var arkSuper = Storage$1.getLocal('ARKSUPER') || {};
      baseConfig.status.successCode = "20010";
      baseConfig.status.value = JSON.stringify(arkSuper);
      successLog();
      return arkSuper;
    }

    function unRegisterSuperProperty(superPropertyName) {
      baseConfig.status.FnName = '$unregisterSuperProperty';
      resetCode();
      var status = checkPrivate(superPropertyName, '$unregisterSuperProperty', true);
      var arkSuper = Storage$1.getLocal('ARKSUPER') || {};

      if (!arkSuper[superPropertyName]) {
        baseConfig.status.successCode = '20011';
        baseConfig.status.value = superPropertyName;
        successLog();
        return;
      }

      delete arkSuper[superPropertyName];
      Storage$1.setLocal('ARKSUPER', arkSuper);
      baseConfig.status.successCode = "20003";
      baseConfig.status.value = superPropertyName;
      successLog();
    }

    function clearSuperProperties() {
      baseConfig.status.FnName = '$clearSuperProperties';
      resetCode();
      Storage$1.setLocal('ARKSUPER', {});
      baseConfig.status.successCode = "20004";
      successLog();
    }

    function reset(resetId, distinctId) {
      resetCode();
      removeUUId();
      clearSuperProperties();
      clearCache(true);
      sessionId$1.setId();

      if (baseConfig.base.autoProfile === true) {
        var resetTime = {
          $reset_time: Util$1.format(new Date(), 'yyyy-MM-dd hh:mm:ss.SSS')
        };
        profileSetOnce(resetTime);
      }

      baseConfig.status.FnName = '$reset';
      baseConfig.status.successCode = "20005";
      successLog();
    }

    function getDistinctId() {
      return getIdentifyId() || getUUId();
    }

    // import '../lib/compatible/index.js'

    var ans = ({
        __proto__: null,
        pageView: pageView,
        profileSet: profileSet,
        profileSetOnce: profileSetOnce,
        profileIncrement: profileIncrement,
        profileAppend: profileAppend,
        profileUnset: profileUnset,
        profileDelete: profileDelete,
        alias: alias,
        identify: identify,
        track: track,
        registerSuperProperty: registerSuperProperty,
        registerSuperProperties: registerSuperProperties,
        getSuperProperty: getSuperProperty,
        getSuperProperties: getSuperProperties,
        unRegisterSuperProperty: unRegisterSuperProperty,
        clearSuperProperties: clearSuperProperties,
        reset: reset,
        freeApi: freeApi,
        getDistinctId: getDistinctId,
        getPresetProperties: getPresetProperties
    });

    function startUp() {
      var log = []; //启动前检测appkey、debugModel、uploadURL参数是否合法

      if (!checkBase()) {
        errorLog();
        return;
      }

      var arkSuper = Storage$1.getLocal('ARKSUPER') || {}; //检测启动前状态,appid，debugModel,uploadURL是否存在修改
      //判断是否是已启动
      //如已启动则不发送启动日志

      if (isStartUp() === false) {
        baseConfig.status.FnName = '$startup'; //更新当前所在事件
        // baseConfig.status.FnName = '$startup'
        //获取事件日志模板

        var startUpTemp = temp$1('$startup'); //验证及填充日志模板中字段内容
        //如未通过验证则返回值为fasle

        var startUpLog = fillField(startUpTemp);
        startUpLog = Util$1.objMerge({
          xcontext: arkSuper
        }, startUpLog);
        log.push(Util$1.delEmpty(startUpLog));
      } //自动采集首次用户属性


      var fristProfile = Storage$1.getLocal('ARKFRISTPROFILE') || false;

      if (baseConfig.base.autoProfile === true && !fristProfile) {
        baseConfig.status.FnName = '$profile_set_once';
        var profileSetOnceTemp = temp$1('$profile_set_once');
        var profileSetOnceObj = fillField(profileSetOnceTemp);
        var time = Util$1.format(new Date(), 'yyyy-MM-dd hh:mm:ss.SSS');
        var obj = {
          $first_visit_time: time,
          $first_visit_language: (navigator.language || navigator.browserLanguage).toLowerCase()
        };
        var profileSetOnceLog = Util$1.objMerge(profileSetOnceObj, {
          xcontext: obj
        });
        log.push(Util$1.delEmpty(profileSetOnceLog));
        Storage$1.setLocal('ARKFRISTPROFILE', time);
      } //自动采集页面


      if (baseConfig.base.auto === true) {
        //获取事件日志模板
        baseConfig.status.FnName = '$pageview';
        var pageViewTemp = temp$1('$pageview');
        var pageViewObj = fillField(pageViewTemp);
        pageViewObj = Util$1.objMerge({
          xcontext: arkSuper
        }, Util$1.delEmpty(pageViewObj));
        var pageProperty = baseConfig.base.pageProperty;
        var status = true;

        if (!Util$1.isEmptyObject(pageProperty)) {
          //检测distinctId
          checkPrivate(pageProperty); // baseConfig.status.FnName = '$pageview'

          pageViewObj = Util$1.objMerge(pageViewObj, {
            xcontext: pageProperty
          });
        } //去除空数据后上传数据


        if (status) {
          log.push(pageViewObj);
        }
      }

      if (log.length > 0) {
        upLog(log);
      } //校准时间
      //开启hash跳转


      if (baseConfig.base.hash === true) {
        hashPageView();
      }
    }

    var JSON2 = createCommonjsModule(function (module, exports) {
      /*
          json2.js
          2011-10-19
      
          Public Domain.
      
          NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
      
          See http://www.JSON.org/js.html
      
      
          This code should be minified before deployment.
          See http://javascript.crockford.com/jsmin.html
      
          USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
          NOT CONTROL.
      
      
          This file creates a global JSON object containing two methods: stringify
          and parse.
      
              JSON.stringify(value, replacer, space)
                  value       any JavaScript value, usually an object or array.
      
                  replacer    an optional parameter that determines how object
                              values are stringified for objects. It can be a
                              function or an array of strings.
      
                  space       an optional parameter that specifies the indentation
                              of nested structures. If it is omitted, the text will
                              be packed without extra whitespace. If it is a number,
                              it will specify the number of spaces to indent at each
                              level. If it is a string (such as '\t' or '&nbsp;'),
                              it contains the characters used to indent at each level.
      
                  This method produces a JSON text from a JavaScript value.
      
                  When an object value is found, if the object contains a toJSON
                  method, its toJSON method will be called and the result will be
                  stringified. A toJSON method does not serialize: it returns the
                  value represented by the name/value pair that should be serialized,
                  or undefined if nothing should be serialized. The toJSON method
                  will be passed the key associated with the value, and this will be
                  bound to the value
      
                  For example, this would serialize Dates as ISO strings.
      
                      Date.prototype.toJSON = function (key) {
                          function f(n) {
                              // Format integers to have at least two digits.
                              return n < 10 ? '0' + n : n;
                          }
      
                          return this.getUTCFullYear()   + '-' +
                               f(this.getUTCMonth() + 1) + '-' +
                               f(this.getUTCDate())      + 'T' +
                               f(this.getUTCHours())     + ':' +
                               f(this.getUTCMinutes())   + ':' +
                               f(this.getUTCSeconds())   + 'Z';
                      };
      
                  You can provide an optional replacer method. It will be passed the
                  key and value of each member, with this bound to the containing
                  object. The value that is returned from your method will be
                  serialized. If your method returns undefined, then the member will
                  be excluded from the serialization.
      
                  If the replacer parameter is an array of strings, then it will be
                  used to select the members to be serialized. It filters the results
                  such that only members with keys listed in the replacer array are
                  stringified.
      
                  Values that do not have JSON representations, such as undefined or
                  functions, will not be serialized. Such values in objects will be
                  dropped; in arrays they will be replaced with null. You can use
                  a replacer function to replace those with JSON values.
                  JSON.stringify(undefined) returns undefined.
      
                  The optional space parameter produces a stringification of the
                  value that is filled with line breaks and indentation to make it
                  easier to read.
      
                  If the space parameter is a non-empty string, then that string will
                  be used for indentation. If the space parameter is a number, then
                  the indentation will be that many spaces.
      
                  Example:
      
                  text = JSON.stringify(['e', {pluribus: 'unum'}]);
                  // text is '["e",{"pluribus":"unum"}]'
      
      
                  text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
                  // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'
      
                  text = JSON.stringify([new Date()], function (key, value) {
                      return this[key] instanceof Date ?
                          'Date(' + this[key] + ')' : value;
                  });
                  // text is '["Date(---current time---)"]'
      
      
              JSON.parse(text, reviver)
                  This method parses a JSON text to produce an object or array.
                  It can throw a SyntaxError exception.
      
                  The optional reviver parameter is a function that can filter and
                  transform the results. It receives each of the keys and values,
                  and its return value is used instead of the original value.
                  If it returns what it received, then the structure is not modified.
                  If it returns undefined then the member is deleted.
      
                  Example:
      
                  // Parse the text. Values that look like ISO date strings will
                  // be converted to Date objects.
      
                  myData = JSON.parse(text, function (key, value) {
                      var a;
                      if (typeof value === 'string') {
                          a =
      /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                          if (a) {
                              return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                                  +a[5], +a[6]));
                          }
                      }
                      return value;
                  });
      
                  myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                      var d;
                      if (typeof value === 'string' &&
                              value.slice(0, 5) === 'Date(' &&
                              value.slice(-1) === ')') {
                          d = new Date(value.slice(5, -1));
                          if (d) {
                              return d;
                          }
                      }
                      return value;
                  });
      
      
          This is a reference implementation. You are free to copy, modify, or
          redistribute.
      */

      /*jslint evil: true, regexp: true */

      /*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
          call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
          getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
          lastIndex, length, parse, prototype, push, replace, slice, stringify,
          test, toJSON, toString, valueOf
      */
      (function (JSON) {

        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap,
            indent,
            meta = {
          // table of character substitutions
          "": '\\b',
          "	": '\\t',
          "\n": '\\n',
          "": '\\f',
          "\r": '\\r',
          '"': '\\"',
          "\\": '\\\\'
        },
            rep;

        function quote(string) {
          // If the string contains no control characters, no quote characters, and no
          // backslash characters, then we can safely slap some quotes around it.
          // Otherwise we must also replace the offending characters with safe escape
          // sequences.
          escapable.lastIndex = 0;
          return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c : "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
          }) + '"' : '"' + string + '"';
        }

        function str(key, holder) {
          // Produce a string from holder[key].
          var i,
              // The loop counter.
          k,
              // The member key.
          v,
              // The member value.
          length,
              mind = gap,
              partial,
              value = holder[key]; // If the value has a toJSON method, call it to obtain a replacement value.

          if (value && _typeof_1(value) === 'object' && typeof value.toJSON === 'function') {
            value = value.toJSON(key);
          } // If we were called with a replacer function, then call the replacer to
          // obtain a replacement value.


          if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
          } // What happens next depends on the value's type.


          switch (_typeof_1(value)) {
            case 'string':
              return quote(value);

            case 'number':
              // JSON numbers must be finite. Encode non-finite numbers as null.
              return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':
              // If the value is a boolean or null, convert it to a string. Note:
              // typeof null does not produce 'null'. The case is included here in
              // the remote chance that this gets fixed someday.
              return String(value);
            // If the type is 'object', we might be dealing with an object or an array or
            // null.

            case 'object':
              // Due to a specification blunder in ECMAScript, typeof null is 'object',
              // so watch out for that case.
              if (!value) {
                return 'null';
              } // Make an array to hold the partial results of stringifying this object value.


              gap += indent;
              partial = []; // Is the value an array?

              if (Object.prototype.toString.apply(value) === '[object Array]') {
                // The value is an array. Stringify every element. Use null as a placeholder
                // for non-JSON values.
                length = value.length;

                for (i = 0; i < length; i += 1) {
                  partial[i] = str(i, value) || 'null';
                } // Join all of the elements together, separated with commas, and wrap them in
                // brackets.


                v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
              } // If the replacer is an array, use it to select the members to be stringified.


              if (rep && _typeof_1(rep) === 'object') {
                length = rep.length;

                for (i = 0; i < length; i += 1) {
                  if (typeof rep[i] === 'string') {
                    k = rep[i];
                    v = str(k, value);

                    if (v) {
                      partial.push(quote(k) + (gap ? ': ' : ':') + v);
                    }
                  }
                }
              } else {
                // Otherwise, iterate through all of the keys in the object.
                for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = str(k, value);

                    if (v) {
                      partial.push(quote(k) + (gap ? ': ' : ':') + v);
                    }
                  }
                }
              } // Join all of the member texts together, separated with commas,
              // and wrap them in braces.


              v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
              gap = mind;
              return v;
          }
        } // If the JSON object does not yet have a stringify method, give it one.


        if (typeof JSON.stringify !== 'function') {
          JSON.stringify = function (value, replacer, space) {
            // The stringify method takes a value and an optional replacer, and an optional
            // space parameter, and returns a JSON text. The replacer can be a function
            // that can replace values, or an array of strings that will select the keys.
            // A default replacer method can be provided. Use of the space parameter can
            // produce text that is more easily readable.
            var i;
            gap = '';
            indent = ''; // If the space parameter is a number, make an indent string containing that
            // many spaces.

            if (typeof space === 'number') {
              for (i = 0; i < space; i += 1) {
                indent += ' ';
              } // If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
              indent = space;
            } // If there is a replacer, it must be a function or an array.
            // Otherwise, throw an error.


            rep = replacer;

            if (replacer && typeof replacer !== 'function' && (_typeof_1(replacer) !== 'object' || typeof replacer.length !== 'number')) {
              throw new Error('JSON.stringify');
            } // Make a fake root object containing our value under the key of ''.
            // Return the result of stringifying the value.


            return str('', {
              "": value
            });
          };
        } // If the JSON object does not yet have a parse method, give it one.


        if (typeof JSON.parse !== 'function') {
          JSON.parse = function (text, reviver) {
            // The parse method takes a text and an optional reviver function, and returns
            // a JavaScript value if the text is a valid JSON text.
            var j;

            function walk(holder, key) {
              // The walk method is used to recursively walk the resulting structure so
              // that modifications can be made.
              var k,
                  v,
                  value = holder[key];

              if (value && _typeof_1(value) === 'object') {
                for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);

                    if (v !== undefined) {
                      value[k] = v;
                    } else {
                      delete value[k];
                    }
                  }
                }
              }

              return reviver.call(holder, key, value);
            } // Parsing happens in four stages. In the first stage, we replace certain
            // Unicode characters with escape sequences. JavaScript handles many characters
            // incorrectly, either silently deleting them, or treating them as line endings.


            text = String(text);
            cx.lastIndex = 0;

            if (cx.test(text)) {
              text = text.replace(cx, function (a) {
                return "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
              });
            } // In the second stage, we run the text against regular expressions that look
            // for non-JSON patterns. We are especially concerned with '()' and 'new'
            // because they can cause invocation, and '=' because it can cause mutation.
            // But just to be safe, we want to reject all unexpected forms.
            // We split the second stage into 4 regexp operations in order to work around
            // crippling inefficiencies in IE's and Safari's regexp engines. First we
            // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
            // replace all simple value tokens with ']' characters. Third, we delete all
            // open brackets that follow a colon or comma or that begin the text. Finally,
            // we look to see that the remaining characters are only whitespace or ']' or
            // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.


            if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
              // In the third stage we use the eval function to compile the text into a
              // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
              // in JavaScript: it can begin a block or an object literal. We wrap the text
              // in parens to eliminate the ambiguity.
              j = eval('(' + text + ')'); // In the optional fourth stage, we recursively walk the new structure, passing
              // each name/value pair to a reviver function for possible transformation.

              return typeof reviver === 'function' ? walk({
                "": j
              }, '') : j;
            } // If the text is not JSON parseable, then a SyntaxError is thrown.


            throw new SyntaxError('JSON.parse');
          };
        }
      })( // Create a JSON object only if one does not already exist. We create the
      // methods in a closure to avoid creating global variables.
       exports );
    });

    /**
     * 兼容低版本API
     */

    function ieCreat() {
      if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (elt
        /*, from*/
        ) {
          var len = this.length >>> 0;
          var from = Number(arguments[1]) || 0;
          from = from < 0 ? Math.ceil(from) : Math.floor(from);
          if (from < 0) from += len;

          for (; from < len; from++) {
            if (from in this && this[from] === elt) return from;
          }

          return -1;
        };
      }
    }

    /**
     * 发布API
     */

    if (Util$1.paramType(window.AnalysysAgent) == 'Array') {
      ieCreat();

      if (window.navigator.userAgent.indexOf('AnalysysAgent/Hybrid') == 0) {
        if (lifecycle$6.AnalysysAgent && lifecycle$6.AnalysysAgent.hybrid && lifecycle$6.AnalysysAgent.hybridAns) {
          lifecycle$6.AnalysysAgent.hybrid();

          if (Util$1.paramType(AnalysysAgent$1) === 'Array') {
            for (var i$3 = 0; i$3 < AnalysysAgent$1.length; i$3++) {
              var item = AnalysysAgent$1[i$3];

              if (item[0] === 'name') {
                window[item[1]] = lifecycle$6.AnalysysAgent.hybridAns;
              }
            }
          }

          window.AnalysysAgent = lifecycle$6.AnalysysAgent.hybridAns;
        }
      } else {
        var AnalysysAgent$1 = window.AnalysysAgent;

        if (Util$1.paramType(AnalysysAgent$1) === 'Array') {
          for (var i$3 = 0; i$3 < AnalysysAgent$1.length; i$3++) {
            var item = AnalysysAgent$1[i$3];

            if (Util$1.paramType(getField[item[0]]) === 'Function') {
              getField[item[0]](item[1]);
            } else {
              baseConfig.base[item[0]] = item[1];
            }
          }

          clearCache();

          for (var i$3 = 0; i$3 < AnalysysAgent$1.length; i$3++) {
            var item = AnalysysAgent$1[i$3];

            if (Util$1.objHasKay(ans, item[0]) && (item[0] === 'identify' || item[0] === 'alias' || item[0].indexOf('Super') > -1)) {
              ans[item[0]](item[1], item[2]);
            }
          }
        }

        if (lifecycle$6.AnalysysAgent && lifecycle$6.AnalysysAgent.init) {
          lifecycle$6.AnalysysAgent.init(baseConfig.base);
        } //如存在修改则重置登录及启动状态


        startUp();

        try {
          //启动完毕后执行调用上报日志累接口
          if (Util$1.paramType(AnalysysAgent$1) === 'Array') {
            var ansName = [];

            for (var i$3 = 0; i$3 < AnalysysAgent$1.length; i$3++) {
              var item = AnalysysAgent$1[i$3];

              if (Util$1.objHasKay(ans, item[0]) && item[0] !== 'identify' && item[0] !== 'alias' && item[0].indexOf('Super') < 0) {
                ans[item[0]](item[1], item[2]);
              }

              if (item[0] === 'name') {
                window[item[1]] = ans;
              }
            }
          }
        } catch (e) {}

        window.AnalysysAgent = ans;
      }
    }

    return ans;

})));
